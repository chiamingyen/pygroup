<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="course-mde-tw.20140417093332.1998"><vh>@settings</vh>
<v t="course-mde-tw.20140417093332.1999"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="course-mde-tw.20140417093332.2000"><vh>@string initial_split_orientation = horizontal</vh></v>
<v t="course-mde-tw.20140417093332.2001"><vh>@string rst3_write_intermediate_extension = .rst</vh></v>
</v>
<v t="2014spring.20140723175454.2635"><vh>2014Fall CP 雲端課程專案</vh>
<v t="2014fall.20140821113240.3140"><vh>帳號驗證</vh></v>
<v t="2014fall.20140821113240.3145"><vh>近端 MySQL 工具</vh></v>
<v t="2014fall.20140821113240.3139" a="E"><vh>資料庫 ORM</vh>
<v t="2014fall.20140821113240.3143"><vh>資料表設計</vh></v>
<v t="2014fall.20140821113240.3144"><vh>分頁設計</vh></v>
<v t="2014fall.20140821113240.3142"><vh>PHP SForum 參考</vh></v>
</v>
<v t="2014fall.20140821113240.3141"><vh>CMSimply 內容管理</vh></v>
</v>
<v t="amd.20150517161425.1"><vh>2015 Spring 接續開發</vh></v>
<v t="2014pythonE.20140422152422.1669"><vh>電子郵箱管理</vh></v>
<v t="2014pythonE.20140422152422.1671"><vh>Github 帳號管理</vh></v>
<v t="2014pythonE.20140422152422.1670"><vh>OpenShift 權限管理</vh></v>
<v t="course-mde-tw.20140422171455.1745"><vh>Github 倉儲與 OpenShift 同步</vh></v>
<v t="2014fall.20140821113240.3146" a="E"><vh>開發日誌</vh>
<v t="2014fall.20140821113240.3147"><vh>Google Adsense 問題</vh></v>
<v t="2014fall.20140826101705.4467"><vh>CMSimply 已知問題</vh></v>
<v t="2015.20140824143250.2077"><vh>20140824 程式更動</vh></v>
<v t="2014fall.20140826101705.4466"><vh>20140826</vh></v>
<v t="2015.20140828002231.2093"><vh>20140828</vh></v>
<v t="2015.20140829105017.2095"><vh>20140829</vh></v>
<v t="2015.20140901003454.2095"><vh>20140901</vh></v>
<v t="2015.20140902161836.5388"><vh>20140903</vh></v>
<v t="2015.20140826151106.2090"><vh>pygroup_config</vh></v>
<v t="2015.20140916184224.2608"><vh>20140916 多人連線問題</vh></v>
<v t="2015.20140917185942.2149"><vh>PostgreSQL 相關變數</vh></v>
<v t="amd.20150517161644.1"><vh>20150517 改版並送到 Github</vh></v>
</v>
<v t="course-mde-tw.20140417093332.2027" a="E"><vh>@path wsgi</vh>
<v t="2014spring.20140803093407.1974" a="E"><vh>@path static</vh>
<v t="2015.20140912081657.3041"><vh>@edit editor.py</vh></v>
<v t="2014spring.20140803093407.1975" a="E"><vh>@path templates</vh>
<v t="2014spring.20140803093407.1979"><vh>@edit usermenu.html</vh></v>
<v t="2015.20140829105017.2097"><vh>@edit login.html</vh></v>
<v t="2014spring.20140804092018.1988"><vh>@edit tasklist.html</vh></v>
<v t="2014spring.20140805082611.1991"><vh>@edit taskform.html</vh></v>
<v t="2014spring.20140818083129.2252"><vh>@edit taskeditform.html</vh></v>
<v t="2015.20140825203447.2082"><vh>@edit editconfigform.html</vh></v>
<v t="2015.20140826084958.2085"><vh>@edit editadsenseform.html</vh></v>
<v t="2014spring.20140820104632.1921"><vh>@edit taskdeleteform.html</vh></v>
<v t="2014spring.20140806131244.1912"><vh>@edit tasksearchform.html</vh></v>
<v t="2014spring.20140803093407.1978"><vh>@edit meta.html</vh></v>
<v t="2014spring.20140803093407.1976" a="E"><vh>@path style</vh>
<v t="2014spring.20140803093407.1977"><vh>@edit base.css</vh></v>
</v>
</v>
</v>
<v t="2014fall.20140821113240.3137" a="E"><vh>@clean application</vh>
<v t="2014fall.20140821113240.3138"><vh>&lt;&lt;declarations&gt;&gt;</vh></v>
</v>
<v t="2014fall.20140821113240.3105" a="E"><vh>@clean pygroup.py</vh>
<v t="2014fall.20140821113240.3106"><vh>&lt;&lt;declarations&gt;&gt; (pygroup)</vh></v>
<v t="2014fall.20140821113240.3107"><vh>class Task</vh></v>
<v t="2014fall.20140821113240.3108" a="E"><vh>class Pygroup</vh>
<v t="2014fall.20140821113240.3109"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.3111"><vh>usermenu</vh></v>
<v t="2014fall.20140821113240.3112"><vh>printuser</vh></v>
<v t="2014fall.20140821113240.3113"><vh>taskform</vh></v>
<v t="2014fall.20140821113240.3114"><vh>taskaction</vh></v>
<v t="2014fall.20140821113240.3115"><vh>index (tasklist)</vh></v>
<v t="2015.20140824143250.2080"><vh>allow_pass</vh></v>
<v t="2015.20140830081045.4015"><vh>strip_tags</vh></v>
<v t="2014fall.20140821113240.3117"><vh>client_ip</vh></v>
<v t="2014fall.20140821113240.3118"><vh>default</vh></v>
<v t="2014fall.20140821113240.3119"><vh>save_program</vh></v>
<v t="2015.20140829105017.2096"><vh>login</vh></v>
<v t="2014fall.20140821113240.3127"><vh>logincheck</vh></v>
<v t="2015.20140825203447.2081"><vh>editconfig</vh></v>
<v t="2015.20140825203447.2080"><vh>editconfigform</vh></v>
<v t="2015.20140826084958.2086"><vh>editadsense</vh></v>
<v t="2015.20140826084958.2084"><vh>editadsenseform</vh></v>
<v t="2015.20140824143250.2078"><vh>parse_config</vh></v>
<v t="2014fall.20140821113240.3128"><vh>logout</vh></v>
<v t="2014fall.20140821113240.3129"><vh>taskeditform</vh></v>
<v t="2014fall.20140821113240.3130"><vh>taskedit</vh></v>
<v t="2014fall.20140821113240.3131"><vh>taskdeleteform</vh></v>
<v t="2014fall.20140821113240.3132"><vh>taskdelete</vh></v>
<v t="2014fall.20140821113240.3133"><vh>tasksearchform</vh></v>
</v>
</v>
<v t="2014fall.20140826101705.2629" a="E"><vh>@clean cmsimply.py</vh>
<v t="2014fall.20140826101705.2630"><vh>&lt;&lt;declarations&gt;&gt; (application)</vh></v>
<v t="2014fall.20140826101705.2631"><vh>downloadlist_access_list</vh></v>
<v t="2014fall.20140826101705.2632"><vh>imagelist_access_list</vh></v>
<v t="2014fall.20140826101705.2633"><vh>sizeof_fmt</vh></v>
<v t="2014fall.20140826101705.2634"><vh>set_admin_css</vh></v>
<v t="2014fall.20140826101705.2635"><vh>set_footer</vh></v>
<v t="2014fall.20140826101705.2636"><vh>file_get_contents</vh></v>
<v t="2014fall.20140826101705.2637"><vh>search_content</vh></v>
<v t="2014fall.20140826101705.2638"><vh>parse_content</vh></v>
<v t="2014fall.20140826101705.2639"><vh>render_menu</vh></v>
<v t="2014fall.20140826101705.2640"><vh>filebrowser</vh></v>
<v t="2014fall.20140826101705.2641"><vh>syntaxhighlight</vh></v>
<v t="2014fall.20140826101705.2642"><vh>editorhead</vh></v>
<v t="2014fall.20140826101705.2643"><vh>tinymceinit</vh></v>
<v t="2014fall.20140826101705.2644"><vh>editorfoot</vh></v>
<v t="2014fall.20140826101705.2645"><vh>tinymce_editor</vh></v>
<v t="2014fall.20140826101705.2646"><vh>parse_config</vh></v>
<v t="2014fall.20140826101705.2647"><vh>file_selector_script</vh></v>
<v t="2014fall.20140826101705.2648"><vh>file_lister</vh></v>
<v t="2014fall.20140826101705.2649"><vh>downloadselect_access_list</vh></v>
<v t="2014fall.20140826101705.2650"><vh>loadlist_access_list</vh></v>
<v t="2014fall.20140826101705.2651"><vh>imageselect_access_list</vh></v>
<v t="2014fall.20140826101705.2652"><vh>sizeof_fmt</vh></v>
<v t="2014fall.20140826101705.2653"><vh>unique</vh></v>
<v t="2014fall.20140826101705.2654" a="E"><vh>class CMSimply</vh>
<v t="2014fall.20140826101705.2655"><vh>__init__</vh></v>
<v t="2014fall.20140826101705.2656"><vh>index</vh></v>
<v t="2014fall.20140826101705.2657"><vh>default</vh></v>
<v t="2014fall.20140826101705.2658"><vh>error_log</vh></v>
<v t="2014fall.20140826101705.2659"><vh>login</vh></v>
<v t="2014fall.20140826101705.2660"><vh>logout</vh></v>
<v t="2014fall.20140826101705.2661"><vh>checkLogin</vh></v>
<v t="2014fall.20140826101705.2662"><vh>get_page</vh></v>
<v t="2014fall.20140826101705.2663"><vh>isAdmin</vh></v>
<v t="2014fall.20140826101705.2664"><vh>edit_page</vh></v>
<v t="2014fall.20140826101705.2665"><vh>savePage</vh></v>
<v t="2014fall.20140826101705.2666"><vh>ssavePage</vh></v>
<v t="2014fall.20140826101705.2667"><vh>save_program</vh></v>
<v t="2014fall.20140826101705.2668"><vh>save_calcprogram</vh></v>
<v t="2014fall.20140826101705.2669"><vh>delete_program</vh></v>
<v t="2014fall.20140826101705.2670"><vh>delete_calcprogram</vh></v>
<v t="2014fall.20140826101705.2671"><vh>fileuploadform</vh></v>
<v t="2014fall.20140826101705.2672"><vh>fileaxupload</vh></v>
<v t="2014fall.20140826101705.2673"><vh>flvplayer</vh></v>
<v t="2014fall.20140826101705.2674"><vh>imageuploadform</vh></v>
<v t="2014fall.20140826101705.2675"><vh>imageaxupload</vh></v>
<v t="2014fall.20140826101705.2676"><vh>file_selector</vh></v>
<v t="2014fall.20140826101705.2677"><vh>download_list</vh></v>
<v t="2014fall.20140826101705.2678"><vh>image_list</vh></v>
<v t="2014fall.20140826101705.2679"><vh>load_list</vh></v>
<v t="2014fall.20140826101705.2680"><vh>delete_file</vh></v>
<v t="2014fall.20140826101705.2681"><vh>image_delete_file</vh></v>
<v t="2014fall.20140826101705.2682"><vh>doDelete</vh></v>
<v t="2014fall.20140826101705.2683"><vh>image_doDelete</vh></v>
<v t="2014fall.20140826101705.2684"><vh>creo_getvolume</vh></v>
<v t="2014fall.20140826101705.2685"><vh>anglebracket</vh></v>
<v t="2014fall.20140826101705.2686"><vh>search_form</vh></v>
<v t="2014fall.20140826101705.2687"><vh>doSearch</vh></v>
<v t="2014fall.20140826101705.2688"><vh>set_css</vh></v>
<v t="2014fall.20140826101705.2689"><vh>edit_config</vh></v>
<v t="2014fall.20140826101705.2690"><vh>saveConfig</vh></v>
<v t="2014fall.20140826101705.2691"><vh>listdir</vh></v>
<v t="2014fall.20140826101705.2692"><vh>sitemap</vh></v>
<v t="2014fall.20140826101705.2693"><vh>brython</vh></v>
<v t="2014fall.20140826101705.2694"><vh>ethercalc</vh></v>
<v t="2014fall.20140826101705.2695"><vh>calc</vh></v>
<v t="2014fall.20140826101705.2696"><vh>openjscad</vh></v>
<v t="2014fall.20140826101705.2697"><vh>ucrobot</vh></v>
</v>
<v t="2014fall.20140826101705.2698" a="E"><vh>class Download</vh>
<v t="2014fall.20140826101705.2699"><vh>index</vh></v>
</v>
</v>
<v t="2015.20140902161836.3788" a="E"><vh>@clean wordnet.py</vh>
<v t="2015.20140902161836.3789"><vh>&lt;&lt;declarations&gt;&gt; (wordnet)</vh></v>
<v t="2015.20140902161836.3790" a="E"><vh>class MyCheck</vh>
<v t="2015.20140902161836.3791"><vh>nl2br</vh></v>
<v t="2015.20140902161836.3792"><vh>printcwd</vh></v>
<v t="2015.20140902161836.3793"><vh>doCheck</vh></v>
<v t="2015.20140902161836.3794"><vh>index</vh></v>
</v>
</v>
<v t="2015.20140902161836.3801"><vh>@clean webster.py</vh>
<v t="2015.20140902161836.3802"><vh>&lt;&lt;declarations&gt;&gt; (webster)</vh></v>
<v t="2015.20140902161836.3803" a="E"><vh>class MyCheck</vh>
<v t="2015.20140902161836.3804"><vh>nl2br</vh></v>
<v t="2015.20140902161836.3805"><vh>doCheck</vh></v>
<v t="2015.20140902161836.3806"><vh>index</vh></v>
</v>
</v>
<v t="2014fall.20140821113240.2887"><vh>@clean skylark.py</vh>
<v t="2014fall.20140821113240.2888"><vh>&lt;&lt;declarations&gt;&gt; (skylark)</vh></v>
<v t="2014fall.20140821113240.2889"><vh>class SkylarkException</vh></v>
<v t="2014fall.20140821113240.2890"><vh>class UnSupportedDBAPI</vh></v>
<v t="2014fall.20140821113240.2891"><vh>class PrimaryKeyValueNotFound</vh></v>
<v t="2014fall.20140821113240.2892"><vh>class SQLSyntaxError</vh></v>
<v t="2014fall.20140821113240.2893"><vh>class ForeignKeyNotFound</vh></v>
<v t="2014fall.20140821113240.2894"><vh>class DBAPI</vh>
<v t="2014fall.20140821113240.2895"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2896"><vh>conn_is_open</vh></v>
<v t="2014fall.20140821113240.2897"><vh>close_conn</vh></v>
<v t="2014fall.20140821113240.2898"><vh>connect</vh></v>
<v t="2014fall.20140821113240.2899"><vh>set_autocommit</vh></v>
<v t="2014fall.20140821113240.2900"><vh>conn_is_alive</vh></v>
<v t="2014fall.20140821113240.2901"><vh>get_cursor</vh></v>
<v t="2014fall.20140821113240.2902"><vh>execute_cursor</vh></v>
<v t="2014fall.20140821113240.2903"><vh>select_db</vh></v>
<v t="2014fall.20140821113240.2904"><vh>begin_transaction</vh></v>
<v t="2014fall.20140821113240.2905"><vh>commit_transaction</vh></v>
<v t="2014fall.20140821113240.2906"><vh>rollback_transaction</vh></v>
</v>
<v t="2014fall.20140821113240.2907"><vh>class MySQLdbAPI</vh></v>
<v t="2014fall.20140821113240.2908"><vh>class PyMySQLAPI</vh>
<v t="2014fall.20140821113240.2909"><vh>conn_is_open</vh></v>
</v>
<v t="2014fall.20140821113240.2910"><vh>class Sqlite3API</vh>
<v t="2014fall.20140821113240.2911"><vh>conn_is_open</vh></v>
<v t="2014fall.20140821113240.2912"><vh>connect</vh></v>
<v t="2014fall.20140821113240.2913"><vh>set_autocommit</vh></v>
<v t="2014fall.20140821113240.2914"><vh>select_db</vh></v>
<v t="2014fall.20140821113240.2915"><vh>conn_is_alive</vh></v>
</v>
<v t="2014fall.20140821113240.2916" a="E"><vh>class DatabaseType</vh>
<v t="2014fall.20140821113240.2917"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2918"><vh>set_dbapi</vh></v>
<v t="2014fall.20140821113240.2919"><vh>config</vh></v>
<v t="2014fall.20140821113240.2920"><vh>connect</vh></v>
<v t="2014fall.20140821113240.2921"><vh>get_conn</vh></v>
<v t="2014fall.20140821113240.2922"><vh>__del__</vh></v>
<v t="2014fall.20140821113240.2923"><vh>execute</vh></v>
<v t="2014fall.20140821113240.2924"><vh>execute_sql</vh></v>
<v t="2014fall.20140821113240.2925"><vh>change</vh></v>
<v t="2014fall.20140821113240.2926"><vh>set_autocommit</vh></v>
<v t="2014fall.20140821113240.2927"><vh>begin</vh></v>
<v t="2014fall.20140821113240.2928"><vh>commit</vh></v>
<v t="2014fall.20140821113240.2929"><vh>rollback</vh></v>
<v t="2014fall.20140821113240.2930"><vh>transaction</vh></v>
</v>
<v t="2014fall.20140821113240.2931"><vh>class Transaction</vh>
<v t="2014fall.20140821113240.2932"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2933"><vh>begin</vh></v>
<v t="2014fall.20140821113240.2934"><vh>commit</vh></v>
<v t="2014fall.20140821113240.2935"><vh>rollback</vh></v>
<v t="2014fall.20140821113240.2936"><vh>__enter__</vh></v>
<v t="2014fall.20140821113240.2937"><vh>__exit__</vh></v>
</v>
<v t="2014fall.20140821113240.2938"><vh>class Leaf</vh>
<v t="2014fall.20140821113240.2939"><vh>_e</vh></v>
<v t="2014fall.20140821113240.2940"><vh>like</vh></v>
<v t="2014fall.20140821113240.2941"><vh>between</vh></v>
<v t="2014fall.20140821113240.2942"><vh>_in</vh></v>
<v t="2014fall.20140821113240.2943"><vh>not_in</vh></v>
<v t="2014fall.20140821113240.2944"><vh>op</vh></v>
</v>
<v t="2014fall.20140821113240.2945" a="E"><vh>class SQL</vh>
<v t="2014fall.20140821113240.2946"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2947"><vh>__repr__</vh></v>
<v t="2014fall.20140821113240.2948"><vh>format</vh></v>
<v t="2014fall.20140821113240.2949"><vh>join</vh></v>
<v t="2014fall.20140821113240.2950"><vh>normalize</vh></v>
</v>
<v t="2014fall.20140821113240.2951"><vh>class Expr</vh>
<v t="2014fall.20140821113240.2952"><vh>__init__</vh></v>
</v>
<v t="2014fall.20140821113240.2953"><vh>class Alias</vh>
<v t="2014fall.20140821113240.2954"><vh>__init__</vh></v>
</v>
<v t="2014fall.20140821113240.2955"><vh>class FieldDescriptor</vh>
<v t="2014fall.20140821113240.2956"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2957"><vh>__get__</vh></v>
<v t="2014fall.20140821113240.2958"><vh>__set__</vh></v>
</v>
<v t="2014fall.20140821113240.2959"><vh>class Field</vh>
<v t="2014fall.20140821113240.2960"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2961"><vh>describe</vh></v>
<v t="2014fall.20140821113240.2962"><vh>alias</vh></v>
</v>
<v t="2014fall.20140821113240.2963"><vh>class PrimaryKey</vh>
<v t="2014fall.20140821113240.2964"><vh>__init__</vh></v>
</v>
<v t="2014fall.20140821113240.2965"><vh>class ForeignKey</vh>
<v t="2014fall.20140821113240.2966"><vh>__init__</vh></v>
</v>
<v t="2014fall.20140821113240.2967"><vh>class Function</vh>
<v t="2014fall.20140821113240.2968"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2969"><vh>alias</vh></v>
</v>
<v t="2014fall.20140821113240.2970"><vh>class Fn</vh>
<v t="2014fall.20140821113240.2971"><vh>_e</vh></v>
<v t="2014fall.20140821113240.2972"><vh>__getattr__</vh></v>
</v>
<v t="2014fall.20140821113240.2973"><vh>class Distinct</vh>
<v t="2014fall.20140821113240.2974"><vh>__init__</vh></v>
</v>
<v t="2014fall.20140821113240.2975"><vh>class Query</vh>
<v t="2014fall.20140821113240.2976"><vh>__init__</vh></v>
</v>
<v t="2014fall.20140821113240.2977"><vh>class InsertQuery</vh>
<v t="2014fall.20140821113240.2978"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2979"><vh>execute</vh></v>
</v>
<v t="2014fall.20140821113240.2980"><vh>class UpdateQuery</vh>
<v t="2014fall.20140821113240.2981"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2982"><vh>execute</vh></v>
</v>
<v t="2014fall.20140821113240.2983" a="E"><vh>class SelectQuery</vh>
<v t="2014fall.20140821113240.2984"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2985"><vh>execute</vh></v>
<v t="2014fall.20140821113240.2986"><vh>__iter__</vh></v>
</v>
<v t="2014fall.20140821113240.2987"><vh>class DeleteQuery</vh>
<v t="2014fall.20140821113240.2988"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2989"><vh>execute</vh></v>
</v>
<v t="2014fall.20140821113240.2990"><vh>class SelectResult</vh>
<v t="2014fall.20140821113240.2991"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.2992"><vh>inst</vh></v>
<v t="2014fall.20140821113240.2993"><vh>__one</vh></v>
<v t="2014fall.20140821113240.2994"><vh>one</vh></v>
<v t="2014fall.20140821113240.2995"><vh>all</vh></v>
<v t="2014fall.20140821113240.2996"><vh>tuples</vh></v>
</v>
<v t="2014fall.20140821113240.2997"><vh>class Compiler</vh>
<v t="2014fall.20140821113240.2998"><vh>sql2sql</vh></v>
<v t="2014fall.20140821113240.2999"><vh>query2sql</vh></v>
<v t="2014fall.20140821113240.3000"><vh>alias2sql</vh></v>
<v t="2014fall.20140821113240.3001"><vh>field2sql</vh></v>
<v t="2014fall.20140821113240.3002"><vh>function2sql</vh></v>
<v t="2014fall.20140821113240.3003"><vh>distinct2sql</vh></v>
<v t="2014fall.20140821113240.3004"><vh>expr2sql</vh></v>
<v t="2014fall.20140821113240.3005"><vh>sql</vh></v>
<v t="2014fall.20140821113240.3006"><vh>jn2sql</vh></v>
<v t="2014fall.20140821113240.3007"><vh>od2sql</vh></v>
<v t="2014fall.20140821113240.3008"><vh>gp2sql</vh></v>
<v t="2014fall.20140821113240.3009"><vh>hv2sql</vh></v>
<v t="2014fall.20140821113240.3010"><vh>wh2sql</vh></v>
<v t="2014fall.20140821113240.3011"><vh>sl2sql</vh></v>
<v t="2014fall.20140821113240.3012"><vh>lm2sql</vh></v>
<v t="2014fall.20140821113240.3013"><vh>st2sql</vh></v>
<v t="2014fall.20140821113240.3014"><vh>vl2sql</vh></v>
<v t="2014fall.20140821113240.3015"><vh>tg2sql</vh></v>
<v t="2014fall.20140821113240.3016"><vh>fm2sql</vh></v>
<v t="2014fall.20140821113240.3017"><vh>compile</vh></v>
</v>
<v t="2014fall.20140821113240.3018"><vh>class Runtime</vh>
<v t="2014fall.20140821113240.3019"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.3020"><vh>reset_data</vh></v>
<v t="2014fall.20140821113240.3021"><vh>_e</vh></v>
</v>
<v t="2014fall.20140821113240.3022"><vh>class MetaModel</vh>
<v t="2014fall.20140821113240.3023"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.3024"><vh>__default_table_name</vh></v>
<v t="2014fall.20140821113240.3025"><vh>__contains__</vh></v>
<v t="2014fall.20140821113240.3026"><vh>__and__</vh></v>
</v>
<v t="2014fall.20140821113240.3027" a="E"><vh>class Model</vh>
<v t="2014fall.20140821113240.3028"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.3029"><vh>set_in_db</vh></v>
<v t="2014fall.20140821113240.3030"><vh>__kwargs</vh></v>
<v t="2014fall.20140821113240.3031"><vh>insert</vh></v>
<v t="2014fall.20140821113240.3032"><vh>update</vh></v>
<v t="2014fall.20140821113240.3033"><vh>select</vh></v>
<v t="2014fall.20140821113240.3034"><vh>delete</vh></v>
<v t="2014fall.20140821113240.3035"><vh>create</vh></v>
<v t="2014fall.20140821113240.3036"><vh>where</vh></v>
<v t="2014fall.20140821113240.3037"><vh>at</vh></v>
<v t="2014fall.20140821113240.3038"><vh>orderby</vh></v>
<v t="2014fall.20140821113240.3039"><vh>groupby</vh></v>
<v t="2014fall.20140821113240.3040"><vh>having</vh></v>
<v t="2014fall.20140821113240.3041"><vh>limit</vh></v>
<v t="2014fall.20140821113240.3042"><vh>join</vh></v>
<v t="2014fall.20140821113240.3043"><vh>left_join</vh></v>
<v t="2014fall.20140821113240.3044"><vh>right_join</vh></v>
<v t="2014fall.20140821113240.3045"><vh>full_join</vh></v>
<v t="2014fall.20140821113240.3046"><vh>findone</vh></v>
<v t="2014fall.20140821113240.3047"><vh>findall</vh></v>
<v t="2014fall.20140821113240.3048"><vh>getone</vh></v>
<v t="2014fall.20140821113240.3049"><vh>getall</vh></v>
<v t="2014fall.20140821113240.3050"><vh>_id</vh></v>
<v t="2014fall.20140821113240.3051"><vh>save</vh></v>
<v t="2014fall.20140821113240.3052"><vh>destroy</vh></v>
<v t="2014fall.20140821113240.3053"><vh>aggregator</vh></v>
</v>
<v t="2014fall.20140821113240.3054" a="E"><vh>class MultiModels</vh>
<v t="2014fall.20140821113240.3055"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.3056"><vh>select</vh></v>
<v t="2014fall.20140821113240.3057"><vh>delete</vh></v>
<v t="2014fall.20140821113240.3058"><vh>update</vh></v>
<v t="2014fall.20140821113240.3059"><vh>where</vh></v>
<v t="2014fall.20140821113240.3060"><vh>orderby</vh></v>
<v t="2014fall.20140821113240.3061"><vh>groupby</vh></v>
<v t="2014fall.20140821113240.3062"><vh>having</vh></v>
<v t="2014fall.20140821113240.3063"><vh>limit</vh></v>
<v t="2014fall.20140821113240.3064"><vh>findone</vh></v>
<v t="2014fall.20140821113240.3065"><vh>findall</vh></v>
<v t="2014fall.20140821113240.3066"><vh>getone</vh></v>
<v t="2014fall.20140821113240.3067"><vh>getall</vh></v>
</v>
<v t="2014fall.20140821113240.3068"><vh>class JoinModel</vh>
<v t="2014fall.20140821113240.3069"><vh>__init__</vh></v>
<v t="2014fall.20140821113240.3070"><vh>build_bridge</vh></v>
<v t="2014fall.20140821113240.3071"><vh>select</vh></v>
<v t="2014fall.20140821113240.3072"><vh>update</vh></v>
<v t="2014fall.20140821113240.3073"><vh>delete</vh></v>
</v>
<v t="2014fall.20140821113240.3074"><vh>_detect_bridge</vh></v>
</v>
<v t="2015.20140902161836.3840"><vh>@clean pybean.py</vh>
<v t="2015.20140902161836.3841"><vh>&lt;&lt;declarations&gt;&gt; (pybean)</vh></v>
<v t="2015.20140902161836.3842"><vh>class SQLiteWriter</vh>
<v t="2015.20140902161836.3843"><vh>__init__</vh></v>
<v t="2015.20140902161836.3844"><vh>__del__</vh></v>
<v t="2015.20140902161836.3845"><vh>replace</vh></v>
<v t="2015.20140902161836.3846"><vh>__create_column</vh></v>
<v t="2015.20140902161836.3847"><vh>__get_columns</vh></v>
<v t="2015.20140902161836.3848"><vh>__create_table</vh></v>
<v t="2015.20140902161836.3849"><vh>get_rows</vh></v>
<v t="2015.20140902161836.3850"><vh>get_count</vh></v>
<v t="2015.20140902161836.3851"><vh>delete</vh></v>
<v t="2015.20140902161836.3852"><vh>link</vh></v>
<v t="2015.20140902161836.3853"><vh>unlink</vh></v>
<v t="2015.20140902161836.3854"><vh>get_linked_rows</vh></v>
<v t="2015.20140902161836.3855"><vh>__create_assoc_table</vh></v>
<v t="2015.20140902161836.3856"><vh>delete_all</vh></v>
<v t="2015.20140902161836.3857"><vh>commit</vh></v>
</v>
<v t="2015.20140902161836.3858"><vh>class Store</vh>
<v t="2015.20140902161836.3859"><vh>__init__</vh></v>
<v t="2015.20140902161836.3860"><vh>new</vh></v>
<v t="2015.20140902161836.3861"><vh>save</vh></v>
<v t="2015.20140902161836.3862"><vh>load</vh></v>
<v t="2015.20140902161836.3863"><vh>count</vh></v>
<v t="2015.20140902161836.3864"><vh>find</vh></v>
<v t="2015.20140902161836.3865"><vh>find_one</vh></v>
<v t="2015.20140902161836.3866"><vh>delete</vh></v>
<v t="2015.20140902161836.3867"><vh>link</vh></v>
<v t="2015.20140902161836.3868"><vh>unlink</vh></v>
<v t="2015.20140902161836.3869"><vh>get_linked</vh></v>
<v t="2015.20140902161836.3870"><vh>delete_all</vh></v>
<v t="2015.20140902161836.3871"><vh>row_to_object</vh></v>
<v t="2015.20140902161836.3872"><vh>commit</vh></v>
</v>
</v>
</v>
<v t="2014spring.20140726005348.1759"><vh>@edit setup.py</vh></v>
<v t="course-mde-tw.20140417093332.2058" a="E"><vh>利用 pandoc 進行格式轉換</vh>
<v t="course-mde-tw.20140422221207.1747"><vh>注意事項</vh></v>
<v t="course-mde-tw.20140417093332.2059"><vh>@button pandoc</vh></v>
<v t="course-mde-tw.20140417093332.2060" a="E"><vh>@path wsgi/doc</vh>
<v t="course-mde-tw.20140417093332.2061"><vh>@edit title.txt</vh></v>
</v>
</v>
<v t="course-mde-tw.20140417093332.2047"><vh>分組協同報告區</vh>
<v t="course-mde-tw.20140417093332.2048" a="E"><vh>@path wsgi/doc</vh>
<v t="course-mde-tw.20140417093332.2049" a="E"><vh>@path 2ag1</vh>
<v t="course-mde-tw.20140417093332.2050"><vh>@edit doc.txt</vh></v>
</v>
<v t="course-mde-tw.20140417093332.2051" a="E"><vh>@path 2ag2</vh>
<v t="course-mde-tw.20140417093332.2052"><vh>@edit doc.txt</vh></v>
</v>
<v t="2014pythonE.20140424070658.1679"><vh>@path coursemdetw</vh>
<v t="2014pythonE.20140424070658.1680"><vh>@auto doc.txt</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="2014fall.20140821113240.2887"># -*- coding: utf-8 -*-
#
#            /)
#           / )
#    (\    /  )
#    ( \  /   )
#     ( \/ / )
#     (@)   )
#     / \_   \
#        // \\\
#        ((   \\
#       ~ ~ ~   \
#      skylark
#

"""
    skylark
    ~~~~~~~

    A micro python orm for mysql and sqlite.

    :author: Chao Wang (Hit9).
    :license: BSD.
"""

@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
</t>
<t tx="2014fall.20140821113240.2888">__version__ = '0.9.0'


__all__ = (
    '__version__',
    'SkylarkException',
    'UnSupportedDBAPI',
    'PrimaryKeyValueNotFound',
    'SQLSyntaxError',
    'ForeignKeyNotFound',
    'Database', 'database',
    'sql', 'SQL',
    'Field',
    'PrimaryKey',
    'ForeignKey',
    'compiler',
    'fn',
    'distinct', 'Distinct'
    'Model',
    'MultiModels', 'Models',
    'JoinModel'
)


import sys


if sys.hexversion &lt; 0x03000000:
    PY_VERSION = 2
else:
    PY_VERSION = 3

if PY_VERSION == 3:
    from functools import reduce


# common operators (~100)
OP_OP = 0  # custom op
OP_LT = 1
OP_LE = 2
OP_GT = 3
OP_GE = 4
OP_EQ = 5
OP_NE = 6
OP_ADD = 7
OP_SUB = 8
OP_MUL = 9
OP_DIV = 10
OP_MOD = 11
OP_AND = 12
OP_OR = 13
OP_RADD = 27
OP_RSUB = 28
OP_RMUL = 29
OP_RDIV = 30
OP_RMOD = 31
OP_RAND = 32
OP_ROR = 33
OP_LIKE = 99

# special operators (100+)
OP_BETWEEN = 101
OP_IN = 102
OP_NOT_IN = 103

# runtimes
RT_ST = 1
RT_VL = 2
RT_SL = 3
RT_WH = 4
RT_GP = 5
RT_HV = 6
RT_OD = 7
RT_LM = 8
RT_JN = 9
RT_TG = 10
RT_FM = 11


# query types
QUERY_INSERT = 1
QUERY_UPDATE = 2
QUERY_SELECT = 3
QUERY_DELETE = 4
</t>
<t tx="2014fall.20140821113240.2889">class SkylarkException(Exception):
    pass
</t>
<t tx="2014fall.20140821113240.2890">class UnSupportedDBAPI(SkylarkException):
    pass
</t>
<t tx="2014fall.20140821113240.2891">class PrimaryKeyValueNotFound(SkylarkException):
    pass
</t>
<t tx="2014fall.20140821113240.2892">class SQLSyntaxError(SkylarkException):
    pass
</t>
<t tx="2014fall.20140821113240.2893">class ForeignKeyNotFound(SkylarkException):
    pass
</t>
<t tx="2014fall.20140821113240.2894">class DBAPI(object):

    placeholder = '%s'

    @others
</t>
<t tx="2014fall.20140821113240.2895">def __init__(self, module):
    self.module = module
</t>
<t tx="2014fall.20140821113240.2896">def conn_is_open(self, conn):
    return conn and conn.open
</t>
<t tx="2014fall.20140821113240.2897">def close_conn(self, conn):
    return conn.close()
</t>
<t tx="2014fall.20140821113240.2898">def connect(self, configs):
    return self.module.connect(**configs)
</t>
<t tx="2014fall.20140821113240.2899">def set_autocommit(self, conn, boolean):
    return conn.autocommit(boolean)
</t>
<t tx="2014fall.20140821113240.2900">def conn_is_alive(self, conn):
    try:
        conn.ping()
    except self.module.OperationalError:
        return False
    return True  # ok
</t>
<t tx="2014fall.20140821113240.2901">def get_cursor(self, conn):
    return conn.cursor()
</t>
<t tx="2014fall.20140821113240.2902">def execute_cursor(self, cursor, args):
    return cursor.execute(*args)
</t>
<t tx="2014fall.20140821113240.2903">def select_db(self, db, conn, configs):
    configs.update({'db': db})
    if self.conn_is_open(conn):
        conn.select_db(db)
</t>
<t tx="2014fall.20140821113240.2904">def begin_transaction(self, conn):
    pass
</t>
<t tx="2014fall.20140821113240.2905">def commit_transaction(self, conn):
    return conn.commit()
</t>
<t tx="2014fall.20140821113240.2906">def rollback_transaction(self, conn):
    return conn.rollback()
</t>
<t tx="2014fall.20140821113240.2907">class MySQLdbAPI(DBAPI):
    pass
</t>
<t tx="2014fall.20140821113240.2908">class PyMySQLAPI(DBAPI):
    @others
</t>
<t tx="2014fall.20140821113240.2909">def conn_is_open(self, conn):
    return conn and conn.socket and conn._rfile
</t>
<t tx="2014fall.20140821113240.2910">class Sqlite3API(DBAPI):

    placeholder = '?'

    @others
</t>
<t tx="2014fall.20140821113240.2911">def conn_is_open(self, conn):
    if conn:
        try:
            # return the total number of db rows that have been modified
            conn.total_changes
        except self.module.ProgrammingError:
            return False
        return True
    return False
</t>
<t tx="2014fall.20140821113240.2912">def connect(self, configs):
    db = configs['db']
    return self.module.connect(db)
</t>
<t tx="2014fall.20140821113240.2913">def set_autocommit(self, conn, boolean):
    if boolean:
        conn.isolation_level = None
    else:
        conn.isolation_level = ''
</t>
<t tx="2014fall.20140821113240.2914">def select_db(self, db, conn, configs):
    # for sqlite3, to change database, must create a new connection
    configs.update({'db': db})
    if self.conn_is_open(conn):
        self.close_conn(conn)
</t>
<t tx="2014fall.20140821113240.2915">def conn_is_alive(self, conn):
    return 1   # sqlite is serverless
</t>
<t tx="2014fall.20140821113240.2916">DBAPI_MAPPINGS = {
    'MySQLdb': MySQLdbAPI,
    'pymysql': PyMySQLAPI,
    'sqlite3': Sqlite3API,
}


DBAPI_LOAD_ORDER = ('MySQLdb', 'pymysql', 'sqlite3')


class DatabaseType(object):
    @others
    select_db = change  # alias
</t>
<t tx="2014fall.20140821113240.2917">def __init__(self):
    self.dbapi = None
    self.conn = None
    self.configs = {}
    self.autocommit = None

    for name in DBAPI_LOAD_ORDER:
        try:
            module = __import__(name)
        except ImportError:
            continue
        self.set_dbapi(module)
        break
</t>
<t tx="2014fall.20140821113240.2918">def set_dbapi(self, module):
    name = module.__name__

    if name in DBAPI_MAPPINGS:
        # clear current configs and connection
        if self.dbapi and self.dbapi.conn_is_open(self.conn):
            self.conn.close()
        self.configs = {}
        self.conn = None
        self.dbapi = DBAPI_MAPPINGS[name](module)
    else:
        raise UnSupportedDBAPI
</t>
<t tx="2014fall.20140821113240.2919">def config(self, **configs):
    self.autocommit = configs.pop('autocommit', True)
    self.configs.update(configs)

    # close active connection on configs change
    if self.dbapi.conn_is_open(self.conn):
        self.dbapi.close_conn(self.conn)
</t>
<t tx="2014fall.20140821113240.2920">def connect(self):
    self.conn = self.dbapi.connect(self.configs)
    self.dbapi.set_autocommit(self.conn, self.autocommit)
    return self.conn
</t>
<t tx="2014fall.20140821113240.2921">def get_conn(self):
    if not (
        self.dbapi.conn_is_open(self.conn) and
        self.dbapi.conn_is_alive(self.conn)
    ):
        self.connect()
    return self.conn
</t>
<t tx="2014fall.20140821113240.2922">def __del__(self):
    if self.dbapi.conn_is_open(self.conn):
        return self.dbapi.close_conn(self.conn)
</t>
<t tx="2014fall.20140821113240.2923">def execute(self, *args):
    cursor = self.dbapi.get_cursor(self.get_conn())
    self.dbapi.execute_cursor(cursor, args)
    return cursor
</t>
<t tx="2014fall.20140821113240.2924">def execute_sql(self, sql):  # execute a sql object
    return self.execute(sql.literal, sql.params)
</t>
<t tx="2014fall.20140821113240.2925">def change(self, db):
    return self.dbapi.select_db(db, self.conn, self.configs)
</t>
<t tx="2014fall.20140821113240.2926">def set_autocommit(self, boolean):
    self.autocommit = boolean
    if self.dbapi.conn_is_open(self.conn):
        return self.dbapi.set_autocommit(self.conn, boolean)
</t>
<t tx="2014fall.20140821113240.2927">def begin(self):
    return self.dbapi.begin_transaction(self.conn)
</t>
<t tx="2014fall.20140821113240.2928">def commit(self):
    return self.dbapi.commit_transaction(self.conn)
</t>
<t tx="2014fall.20140821113240.2929">def rollback(self):
    return self.dbapi.rollback_transaction(self.conn)
</t>
<t tx="2014fall.20140821113240.2930">def transaction(self):
    return Transaction(self)
</t>
<t tx="2014fall.20140821113240.2931">database = Database = DatabaseType()


class Transaction(object):
    @others
</t>
<t tx="2014fall.20140821113240.2932">def __init__(self, database):
    self.database = database
</t>
<t tx="2014fall.20140821113240.2933">def begin(self):
    return self.database.begin()
</t>
<t tx="2014fall.20140821113240.2934">def commit(self):
    return self.database.commit()
</t>
<t tx="2014fall.20140821113240.2935">def rollback(self):
    return self.database.rollback()
</t>
<t tx="2014fall.20140821113240.2936">def __enter__(self):
    self.begin()
    return self
</t>
<t tx="2014fall.20140821113240.2937">def __exit__(self, except_tp, except_val, trace):
    return self.commit()
</t>
<t tx="2014fall.20140821113240.2938">class Leaf(object):
    @others
</t>
<t tx="2014fall.20140821113240.2939">def _e(op_type, invert=False):
    def e(self, right):
        if invert:
            return Expr(right, self, op_type)
        return Expr(self, right, op_type)
    return e
</t>
<t tx="2014fall.20140821113240.2940">__lt__ = _e(OP_LT)
__le__ = _e(OP_LE)
__gt__ = _e(OP_GT)
__ge__ = _e(OP_GE)
__eq__ = _e(OP_EQ)
__ne__ = _e(OP_NE)

__add__ = _e(OP_ADD)
__sub__ = _e(OP_SUB)
__mul__ = _e(OP_MUL)
__div__ = _e(OP_DIV)
__truediv__ = _e(OP_DIV)
__mod__ = _e(OP_MOD)
__and__ = _e(OP_AND)
__or__ = _e(OP_OR)

__radd__ = _e(OP_ADD, invert=True)
__rsub__ = _e(OP_SUB, invert=True)
__rmul__ = _e(OP_MUL, invert=True)
__rdiv__ = _e(OP_DIV, invert=True)
__rtruediv__ = _e(OP_DIV, invert=True)
__rmod__ = _e(OP_MOD, invert=True)
__rand__ = _e(OP_AND, invert=True)
__ror__ = _e(OP_OR, invert=True)

def like(self, pattern):
    return Expr(self, pattern, OP_LIKE)
</t>
<t tx="2014fall.20140821113240.2941">def between(self, left, right):
    return Expr(self, (left, right), OP_BETWEEN)
</t>
<t tx="2014fall.20140821113240.2942">def _in(self, *vals):
    return Expr(self, vals, OP_IN)
</t>
<t tx="2014fall.20140821113240.2943">def not_in(self, *vals):
    return Expr(self, vals, OP_NOT_IN)
</t>
<t tx="2014fall.20140821113240.2944">def op(self, op_str):
    def func(other):
        return Expr(self, other, OP_OP, op_str=op_str)
    return func
</t>
<t tx="2014fall.20140821113240.2945">class SQL(Leaf):
    @others
</t>
<t tx="2014fall.20140821113240.2946">def __init__(self, literal, *params):
    self.literal = literal
    self.params = params
</t>
<t tx="2014fall.20140821113240.2947">def __repr__(self):
    return '&lt;sql %r %r&gt;' % (self.literal, self.params)
</t>
<t tx="2014fall.20140821113240.2948">@classmethod
def format(cls, spec, *args):
    literal = spec % tuple(arg.literal for arg in args)
    params = sum([arg.params for arg in args], tuple())
    return cls(literal, *params)
</t>
<t tx="2014fall.20140821113240.2949">@classmethod
def join(cls, sptr, seq):
    # seq maybe a generator, so cast it static to iter twice
    seq = tuple(seq)
    literal = sptr.join(sql.literal for sql in seq)
    params = sum([sql.params for sql in seq], tuple())
    return cls(literal, *params)
</t>
<t tx="2014fall.20140821113240.2950">def normalize(self):
    # let sql literal behave normal
    self.literal = ' '.join(self.literal.split())  # remove spaces
    # remove unnecessary parentheses
    size = len(self.literal)
    count = 0
    pairs = []

    for p in range(size):
        if self.literal[p] != '(':
            continue
        for q in range(p, size):
            if self.literal[q] == '(':
                count += 1
            if self.literal[q] == ')':
                count -= 1
            if count == 0:
                break
        if count != 0:
            raise SQLSyntaxError  # unbalanced '()'
        pairs.append((p, q))

    blacklist = []

    for p, q in pairs:
        if (p + 1, q - 1) in pairs:
            blacklist.append(p)
            blacklist.append(q)

    self.literal = ''.join(v for k, v in enumerate(self.literal)
                           if k not in blacklist)
</t>
<t tx="2014fall.20140821113240.2951">sql = SQL


class Expr(Leaf):
    @others
</t>
<t tx="2014fall.20140821113240.2952">def __init__(self, left, right, op_type, op_str=None):
    self.left = left
    self.right = right
    self.op_type = op_type
    self.op_str = op_str
</t>
<t tx="2014fall.20140821113240.2953">class Alias(object):
    @others
</t>
<t tx="2014fall.20140821113240.2954">def __init__(self, name, inst):
    self.name = name
    self.inst = inst
</t>
<t tx="2014fall.20140821113240.2955">class FieldDescriptor(object):
    @others
</t>
<t tx="2014fall.20140821113240.2956">def __init__(self, field):
    self.field = field
</t>
<t tx="2014fall.20140821113240.2957">def __get__(self, inst, type=None):
    if inst:
        return inst.data[self.field.name]
    return self.field
</t>
<t tx="2014fall.20140821113240.2958">def __set__(self, inst, val):
    inst.data[self.field.name] = val
</t>
<t tx="2014fall.20140821113240.2959">class Field(Leaf):
    @others
</t>
<t tx="2014fall.20140821113240.2960">def __init__(self, is_primarykey=False, is_foreignkey=False):
    self.is_primarykey = is_primarykey
    self.is_foreignkey = is_foreignkey
</t>
<t tx="2014fall.20140821113240.2961">def describe(self, name, model):
    self.name = name
    self.model = model
    self.fullname = '%s.%s' % (model.table_name, name)
    setattr(model, name, FieldDescriptor(self))
</t>
<t tx="2014fall.20140821113240.2962">def alias(self, name):
    return Alias(name, self)
</t>
<t tx="2014fall.20140821113240.2963">class PrimaryKey(Field):
    @others
</t>
<t tx="2014fall.20140821113240.2964">def __init__(self):
    super(PrimaryKey, self).__init__(is_primarykey=True)
</t>
<t tx="2014fall.20140821113240.2965">class ForeignKey(Field):
    @others
</t>
<t tx="2014fall.20140821113240.2966">def __init__(self, reference):
    super(ForeignKey, self).__init__(is_foreignkey=True)
    self.reference = reference
</t>
<t tx="2014fall.20140821113240.2967">class Function(Leaf):
    @others
</t>
<t tx="2014fall.20140821113240.2968">def __init__(self, name, *args):
    self.name = name
    self.args = args
</t>
<t tx="2014fall.20140821113240.2969">def alias(self, name):
    return Alias(name, self)
</t>
<t tx="2014fall.20140821113240.2970">class Fn(object):
    @others
</t>
<t tx="2014fall.20140821113240.2971">def _e(self, name):
    def e(*args):
        return Function(name, *args)
    return e
</t>
<t tx="2014fall.20140821113240.2972">def __getattr__(self, name):
    return self._e(name)
</t>
<t tx="2014fall.20140821113240.2973">fn = Fn()


class Distinct(object):
    @others
</t>
<t tx="2014fall.20140821113240.2974"># 'distinct user.name, user.email..' -&gt; legal
# 'user.id distinct user.name' -&gt; illegal
# 'user.id, count(distinct user.name)' -&gt; legal

def __init__(self, *args):
    self.args = args
</t>
<t tx="2014fall.20140821113240.2975">distinct = Distinct


class Query(object):
    @others
</t>
<t tx="2014fall.20140821113240.2976">def __init__(self, type, runtime):
    self.type = type
    self.sql = compiler.compile(self.type, runtime)
    runtime.reset_data()
</t>
<t tx="2014fall.20140821113240.2977">class InsertQuery(Query):
    @others
</t>
<t tx="2014fall.20140821113240.2978">def __init__(self, runtime):
    super(InsertQuery, self).__init__(QUERY_INSERT, runtime)
</t>
<t tx="2014fall.20140821113240.2979">def execute(self):
    cursor = database.execute_sql(self.sql)
    last_insert_id = cursor.lastrowid
    rows_affected = cursor.rowcount
    cursor.close()
    if rows_affected:
        return last_insert_id
</t>
<t tx="2014fall.20140821113240.2980">class UpdateQuery(Query):
    @others
</t>
<t tx="2014fall.20140821113240.2981">def __init__(self, runtime):
    super(UpdateQuery, self).__init__(QUERY_UPDATE, runtime)
</t>
<t tx="2014fall.20140821113240.2982">def execute(self):
    cursor = database.execute_sql(self.sql)
    rows_affected = cursor.rowcount
    cursor.close()
    return rows_affected
</t>
<t tx="2014fall.20140821113240.2983">class SelectQuery(Query):
    @others
</t>
<t tx="2014fall.20140821113240.2984">def __init__(self, runtime):
    self.model = runtime.model
    self.nodes = runtime.data[RT_SL]
    super(SelectQuery, self).__init__(QUERY_SELECT, runtime)
</t>
<t tx="2014fall.20140821113240.2985">def execute(self):
    cursor = database.execute_sql(self.sql)
    result = SelectResult(tuple(cursor.fetchall()), self.model, self.nodes)
    cursor.close()
    return result
</t>
<t tx="2014fall.20140821113240.2986">def __iter__(self):
    result = self.execute()
    return iter(result.all())
</t>
<t tx="2014fall.20140821113240.2987">class DeleteQuery(Query):
    @others
</t>
<t tx="2014fall.20140821113240.2988">def __init__(self, runtime):
    super(DeleteQuery, self).__init__(QUERY_DELETE, runtime)
</t>
<t tx="2014fall.20140821113240.2989">def execute(self):
    cursor = database.execute_sql(self.sql)
    rows_affected = cursor.rowcount
    cursor.close()
    return rows_affected
</t>
<t tx="2014fall.20140821113240.2990">class SelectResult(object):
    @others
</t>
<t tx="2014fall.20140821113240.2991">def __init__(self, rows, model, nodes, rowcount=-1):
    self.rows = rows
    self.model = model
    # for sqlite3, DBAPI2 said rowcount on select will always be -1
    self.count = rowcount if rowcount &gt;= 0 else len(rows)
    self._rows = (row for row in self.rows)

    # distinct should be the first select node if it exists
    if nodes and isinstance(nodes[0], Distinct):
        nodes = list(nodes[0].args) + nodes[1:]
    self.nodes = nodes
</t>
<t tx="2014fall.20140821113240.2992">def inst(self, model, row):
    inst = model()
    inst.set_in_db(True)

    for idx, node in enumerate(self.nodes):
        if isinstance(node, Field) and node.model is model:
            inst.data[node.name] = row[idx]
        if isinstance(node, Alias) and isinstance(node.inst, Field) \
                and node.inst.model is model:
            setattr(inst, node.name, row[idx])
    return inst
</t>
<t tx="2014fall.20140821113240.2993">def __one(self, row):
    if self.model.single:
        return self.inst(self.model, row)
    return tuple(map(lambda m: self.inst(m, row), self.model.models))
</t>
<t tx="2014fall.20140821113240.2994">def one(self):
    try:
        row = next(self._rows)  # py2.6+/3.0+
    except StopIteration:
        return None
    return self.__one(row)
</t>
<t tx="2014fall.20140821113240.2995">def all(self):
    return tuple(map(self.__one, self.rows))
</t>
<t tx="2014fall.20140821113240.2996">def tuples(self):
    return self.rows
</t>
<t tx="2014fall.20140821113240.2997">class Compiler(object):

    mappings = {
        OP_LT: '&lt;',
        OP_LE: '&lt;=',
        OP_GT: '&gt;',
        OP_GE: '&gt;=',
        OP_EQ: '=',
        OP_NE: '&lt;&gt;',
        OP_ADD: '+',
        OP_SUB: '-',
        OP_MUL: '*',
        OP_DIV: '/',
        OP_MOD: '%%',  # escape '%'
        OP_AND: 'and',
        OP_OR: 'or',
        OP_LIKE: 'like',
        OP_BETWEEN: 'between',
        OP_IN: 'in',
        OP_NOT_IN: 'not in',
    }

    @others
</t>
<t tx="2014fall.20140821113240.2998">def sql2sql(sql):
    return sql
</t>
<t tx="2014fall.20140821113240.2999">def query2sql(query):
    return sql.format('(%s)', query.sql)
</t>
<t tx="2014fall.20140821113240.3000">def alias2sql(alias):
    spec = '%%s as %s' % alias.name
    return sql.format(spec, compiler.sql(alias.inst))
</t>
<t tx="2014fall.20140821113240.3001">def field2sql(field):
    return sql(field.fullname)
</t>
<t tx="2014fall.20140821113240.3002">def function2sql(function):
    spec = '%s(%%s)' % function.name
    args = sql.join(', ', map(compiler.sql, function.args))
    return sql.format(spec, args)
</t>
<t tx="2014fall.20140821113240.3003">def distinct2sql(distinct):
    args = sql.join(', ', map(compiler.sql, distinct.args))
    return sql.format('distinct(%s)', args)
</t>
<t tx="2014fall.20140821113240.3004">def expr2sql(expr):
    if expr.op_str is None:
        op_str = compiler.mappings[expr.op_type]
    else:
        op_str = expr.op_str

    left = compiler.sql(expr.left)

    if expr.op_type &lt; 100:  # common ops
        right = compiler.sql(expr.right)
    elif expr.op_type is OP_BETWEEN:
        right = sql.join(' and ', map(compiler.sql, expr.right))
    elif expr.op_type in (OP_IN, OP_NOT_IN):
        vals = sql.join(', ', map(compiler.sql, expr.right))
        right = sql.format('(%s)', vals)

    spec = '%%s %s %%s' % op_str

    if expr.op_type in (OP_AND, OP_OR):
        spec = '(%s)' % spec

    return sql.format(spec, left, right)
</t>
<t tx="2014fall.20140821113240.3005">conversions = {
    SQL: sql2sql,
    Expr: expr2sql,
    Alias: alias2sql,
    Field: field2sql,
    PrimaryKey: field2sql,
    ForeignKey: field2sql,
    Function: function2sql,
    Distinct: distinct2sql,
    Query: query2sql,
    InsertQuery: query2sql,
    UpdateQuery: query2sql,
    SelectQuery: query2sql,
    DeleteQuery: query2sql
}

def sql(self, inst):
    tp = type(inst)
    if tp in self.conversions:
        return self.conversions[tp](inst)
    return sql(database.dbapi.placeholder, inst)
</t>
<t tx="2014fall.20140821113240.3006">def jn2sql(lst):
    prefix, main, join, expr = lst

    prefix = '' if prefix is None else '%s ' % prefix

    if expr is None:
        foreignkey = _detect_bridge(main, join)
        expr = foreignkey == foreignkey.reference

    spec = '%sjoin %s on %%s' % (prefix, join.table_name)
    return sql.format(spec, compiler.sql(expr))
</t>
<t tx="2014fall.20140821113240.3007">def od2sql(lst):
    node, desc = lst
    spec = 'order by %%s%s' % (' desc' if desc else '')
    return sql.format(spec, compiler.sql(node))
</t>
<t tx="2014fall.20140821113240.3008">def gp2sql(lst):
    spec = 'group by %s'
    arg = sql.join(', ', map(compiler.sql, lst))
    return sql.format(spec, arg)
</t>
<t tx="2014fall.20140821113240.3009">def hv2sql(lst):
    spec = 'having %s'
    arg = sql.join(' and ', map(compiler.sql, lst))
    return sql.format(spec, arg)
</t>
<t tx="2014fall.20140821113240.3010">def wh2sql(lst):
    spec = 'where %s'
    arg = sql.join(' and ', map(compiler.sql, lst))
    return sql.format(spec, arg)
</t>
<t tx="2014fall.20140821113240.3011">def sl2sql(lst):
    return sql.join(', ', map(compiler.sql, lst))
</t>
<t tx="2014fall.20140821113240.3012">def lm2sql(lst):
    offset, rows = lst
    literal = 'limit %s%s' % (
        '%s, ' % offset if offset is not None else '', rows)
    return sql(literal)
</t>
<t tx="2014fall.20140821113240.3013">def st2sql(lst):
    pairs = [
        sql.format('%s=%%s' % expr.left.name, compiler.sql(expr.right))
        for expr in lst]
    return sql.join(', ', pairs)
</t>
<t tx="2014fall.20140821113240.3014">def vl2sql(lst):
    keys = ', '.join([expr.left.name for expr in lst])
    vals = map(compiler.sql, [expr.right for expr in lst])
    spec = '(%s) values (%%s)' % keys
    arg = sql.join(', ', vals)
    return sql.format(spec, arg)
</t>
<t tx="2014fall.20140821113240.3015">def tg2sql(lst):
    args = map(sql, [m.table_name for m in lst])
    return sql.join(', ', args)
</t>
<t tx="2014fall.20140821113240.3016">def fm2sql(lst):
    args = map(sql, [m.table_name for m in lst])
    return sql.join(', ', args)
</t>
<t tx="2014fall.20140821113240.3017">rt_conversions = {
    RT_OD: od2sql,
    RT_GP: gp2sql,
    RT_HV: hv2sql,
    RT_WH: wh2sql,
    RT_SL: sl2sql,
    RT_LM: lm2sql,
    RT_ST: st2sql,
    RT_VL: vl2sql,
    RT_JN: jn2sql,
    RT_TG: tg2sql,
    RT_FM: fm2sql,
}

patterns = {
    QUERY_INSERT: ('insert into %s %s', (RT_TG, RT_VL)),
    QUERY_UPDATE: ('update %s set %s %s', (RT_TG, RT_ST, RT_WH)),
    QUERY_SELECT: ('select %s from %s %s %s %s %s %s %s', (
        RT_SL, RT_FM, RT_JN, RT_WH, RT_GP, RT_HV, RT_OD, RT_LM)),
    QUERY_DELETE: ('delete %s from %s %s', (RT_TG, RT_FM, RT_WH))
}

def compile(self, type, runtime):
    pattern = self.patterns[type]

    spec, rts = pattern

    args = []

    for tp in rts:
        data = runtime.data[tp]
        if data:
            args.append(self.rt_conversions[tp](data))
        else:
            args.append(sql(''))

    sq = sql.format(spec, *args)
    sq.normalize()
    return sq
</t>
<t tx="2014fall.20140821113240.3018">compiler = Compiler()


class Runtime(object):

    RUNTIMES = (
        RT_ST,  # update set
        RT_VL,  # insert values
        RT_SL,  # select fields
        RT_WH,  # where
        RT_GP,  # group by
        RT_HV,  # having
        RT_OD,  # order by
        RT_LM,  # limit
        RT_JN,  # join (inner, left, inner)
        RT_TG,  # target table
        RT_FM,  # from table
    )

    @others
    set_st = _e(RT_ST)

    set_vl = _e(RT_VL)

    set_sl = _e(RT_SL)

    set_wh = _e(RT_WH)

    set_gp = _e(RT_GP)

    set_hv = _e(RT_HV)

    set_od = _e(RT_OD)

    set_lm = _e(RT_LM)

    set_jn = _e(RT_JN)

    set_tg = _e(RT_TG)

    set_fm = _e(RT_FM)
</t>
<t tx="2014fall.20140821113240.3019">def __init__(self, model):
    self.model = model
    self.reset_data()
</t>
<t tx="2014fall.20140821113240.3020">def reset_data(self):
    self.data = dict((k, []) for k in self.RUNTIMES)
</t>
<t tx="2014fall.20140821113240.3021">def _e(tp):
    def e(self, lst):
        self.data[tp] = list(lst)
    return e
</t>
<t tx="2014fall.20140821113240.3022">class MetaModel(type):
    @others
</t>
<t tx="2014fall.20140821113240.3023">def __init__(cls, name, bases, attrs):
    # table_name is not inheritable
    table_name = cls.__dict__.get(
        'table_name', cls.__default_table_name())
    # table_prefix is inheritable
    table_prefix = getattr(cls, 'table_prefix', None)
    if table_prefix:
        table_name = table_prefix + table_name
    cls.table_name = table_name
    cls.table_prefix = table_prefix

    primarykey = None
    fields = {}
    for key, val in cls.__dict__.items():
        if isinstance(val, Field):
            fields[key] = val
            if val.is_primarykey:
                primarykey = val
    if primarykey is None:
        fields['id'] = primarykey = PrimaryKey()
    for name, field in fields.items():
        field.describe(name, cls)

    cls.fields = fields
    cls.primarykey = primarykey
    cls.runtime = Runtime(cls)
</t>
<t tx="2014fall.20140821113240.3024">def __default_table_name(cls):
    def _e(x, y):
        s = '_' if y.isupper() else ''
        return s.join((x, y))
    return reduce(_e, list(cls.__name__)).lower()
</t>
<t tx="2014fall.20140821113240.3025">def __contains__(cls, inst):
    if isinstance(inst, cls):
        if inst._in_db:
            return True
        query = cls.where(**inst.data).select(fn.count(cls.primarykey))
        result = query.execute()
        if result.tuples()[0][0] &gt; 0:
            return True
    return False
</t>
<t tx="2014fall.20140821113240.3026">def __and__(cls, other):
    return JoinModel(cls, other)
</t>
<t tx="2014fall.20140821113240.3027">class Model(MetaModel('NewBase', (object, ), {})):  # py3 compat

    single = True

    @others
    count = aggregator('count')

    sum = aggregator('sum')

    max = aggregator('max')

    min = aggregator('min')

    avg = aggregator('avg')
</t>
<t tx="2014fall.20140821113240.3028">def __init__(self, *lst, **dct):
    self.data = {}

    for expr in lst:
        field, val = expr.left, expr.right
        self.data[field.name] = val

    self.data.update(dct)
    self._cache = self.data.copy()
    self.set_in_db(False)
</t>
<t tx="2014fall.20140821113240.3029">def set_in_db(self, boolean):
    self._in_db = boolean
</t>
<t tx="2014fall.20140821113240.3030">def __kwargs(func):
    @classmethod
    def _func(cls, *lst, **dct):
        lst = list(lst)
        if dct:
            lst.extend([cls.fields[k] == v for k, v in dct.items()])
        return func(cls, *lst)
    return _func
</t>
<t tx="2014fall.20140821113240.3031">@__kwargs
def insert(cls, *lst, **dct):
    cls.runtime.set_vl(lst)
    cls.runtime.set_tg([cls])
    return InsertQuery(cls.runtime)
</t>
<t tx="2014fall.20140821113240.3032">@__kwargs
def update(cls, *lst, **dct):
    cls.runtime.set_st(lst)
    cls.runtime.set_tg([cls])
    return UpdateQuery(cls.runtime)
</t>
<t tx="2014fall.20140821113240.3033">@classmethod
def select(cls, *lst):
    if not lst:
        lst = cls.fields.values()
    cls.runtime.set_sl(lst)
    cls.runtime.set_fm([cls])
    return SelectQuery(cls.runtime)
</t>
<t tx="2014fall.20140821113240.3034">@classmethod
def delete(cls):
    cls.runtime.set_fm([cls])
    return DeleteQuery(cls.runtime)
</t>
<t tx="2014fall.20140821113240.3035">@classmethod
def create(cls, *lst, **dct):
    query = cls.insert(*lst, **dct)
    id = query.execute()

    if id is not None:
        dct[cls.primarykey.name] = id
        inst = cls(*lst, **dct)
        inst.set_in_db(True)
        return inst
    return None
</t>
<t tx="2014fall.20140821113240.3036">@__kwargs
def where(cls, *lst, **dct):
    cls.runtime.set_wh(lst)
    return cls
</t>
<t tx="2014fall.20140821113240.3037">@classmethod
def at(cls, id):
    return cls.where(cls.primarykey == id)
</t>
<t tx="2014fall.20140821113240.3038">@classmethod
def orderby(cls, field, desc=False):
    cls.runtime.set_od((field, desc))
    return cls
</t>
<t tx="2014fall.20140821113240.3039">@classmethod
def groupby(cls, *lst):
    cls.runtime.set_gp(lst)
    return cls
</t>
<t tx="2014fall.20140821113240.3040">@classmethod
def having(cls, *lst):
    cls.runtime.set_hv(lst)
    return cls
</t>
<t tx="2014fall.20140821113240.3041">@classmethod
def limit(cls, rows, offset=None):
    cls.runtime.set_lm((offset, rows))
    return cls
</t>
<t tx="2014fall.20140821113240.3042">@classmethod
def join(cls, model, on=None, prefix=None):
    cls.runtime.set_jn((prefix, cls, model, on))
    return cls
</t>
<t tx="2014fall.20140821113240.3043">@classmethod
def left_join(cls, model, on=None):
    return cls.join(model, on=on, prefix='left')
</t>
<t tx="2014fall.20140821113240.3044">@classmethod
def right_join(cls, model, on=None):
    return cls.join(model, on=on, prefix='right')
</t>
<t tx="2014fall.20140821113240.3045">@classmethod
def full_join(cls, model, on=None):
    return cls.join(model, on=on, prefix='full')
</t>
<t tx="2014fall.20140821113240.3046">@classmethod
def findone(cls, *lst, **dct):
    query = cls.where(*lst, **dct).select()
    result = query.execute()
    return result.one()
</t>
<t tx="2014fall.20140821113240.3047">@classmethod
def findall(cls, *lst, **dct):
    query = cls.where(*lst, **dct).select()
    result = query.execute()
    return result.all()
</t>
<t tx="2014fall.20140821113240.3048">@classmethod
def getone(cls):
    return cls.select().execute().one()
</t>
<t tx="2014fall.20140821113240.3049">@classmethod
def getall(cls):
    return cls.select().execute().all()
</t>
<t tx="2014fall.20140821113240.3050">@property
def _id(self):
    return self.data.get(type(self).primarykey.name, None)
</t>
<t tx="2014fall.20140821113240.3051">def save(self):
    model = type(self)

    if not self._in_db:  # insert
        id = model.insert(**self.data).execute()

        if id is not None:
            self.data[model.primarykey.name] = id
            self.set_in_db(True)
            self._cache = self.data.copy()  # sync cache on saving
        return id
    else:  # update
        dct = dict(set(self.data.items()) - set(self._cache.items()))

        if self._id is None:
            raise PrimaryKeyValueNotFound

        if dct:
            query = model.at(self._id).update(**dct)
            rows_affected = query.execute()
        else:
            rows_affected = 0
        self._cache = self.data.copy()
        return rows_affected
</t>
<t tx="2014fall.20140821113240.3052">def destroy(self):
    if self._in_db:
        if self._id is None:
            raise PrimaryKeyValueNotFound
        result = type(self).at(self._id).delete().execute()
        if result:
            self.set_in_db(False)
        return result
    return None
</t>
<t tx="2014fall.20140821113240.3053">def aggregator(name):
    @classmethod
    def _func(cls, arg=None):
        if arg is None:
            arg = cls.primarykey
        function = Function(name, arg)
        query = cls.select(function)
        result = query.execute()
        return result.tuples()[0][0]
    return _func
</t>
<t tx="2014fall.20140821113240.3054">class MultiModels(object):

    single = False

    @others
</t>
<t tx="2014fall.20140821113240.3055">def __init__(self, *models):
    self.models = models
    self.runtime = Runtime(self)
</t>
<t tx="2014fall.20140821113240.3056">def select(self, *lst):
    if not lst:
        lst = sum([list(m.fields.values()) for m in self.models], [])
    self.runtime.set_sl(lst)
    self.runtime.set_fm(self.models)
    return SelectQuery(self.runtime)
</t>
<t tx="2014fall.20140821113240.3057">def delete(self, *targets):  # default target: all (mysql only)
    if not targets:
        targets = self.models
    self.runtime.set_fm(self.models)
    self.runtime.set_tg(targets)
    return DeleteQuery(self.runtime)
</t>
<t tx="2014fall.20140821113240.3058">def update(self, *lst):
    self.runtime.set_fm(self.models)
    self.runtime.set_set(lst, {})
    return UpdateQuery(self.runtime)
</t>
<t tx="2014fall.20140821113240.3059">def where(self, *lst):
    self.runtime.set_wh(lst)
    return self
</t>
<t tx="2014fall.20140821113240.3060">def orderby(self, field, desc=False):
    self.runtime.set_od((field, desc))
    return self
</t>
<t tx="2014fall.20140821113240.3061">def groupby(self, *lst):
    self.runtime.set_gp(lst)
    return self
</t>
<t tx="2014fall.20140821113240.3062">def having(self, *lst):
    self.runtime.set_hv(lst)
    return self
</t>
<t tx="2014fall.20140821113240.3063">def limit(self, rows, offset=None):
    self.runtime.set_lm((offset, rows))
    return self
</t>
<t tx="2014fall.20140821113240.3064">def findone(self, *lst):
    query = self.where(*lst).select()
    result = query.execute()
    return result.one()
</t>
<t tx="2014fall.20140821113240.3065">def findall(self, *lst):
    query = self.where(*lst).select()
    result = query.execute()
    return result.all()
</t>
<t tx="2014fall.20140821113240.3066">def getone(self):
    return self.select().execute().one()
</t>
<t tx="2014fall.20140821113240.3067">def getall(self):
    return self.select().execute().all()
</t>
<t tx="2014fall.20140821113240.3068">Models = MultiModels


class JoinModel(MultiModels):
    @others
</t>
<t tx="2014fall.20140821113240.3069">def __init__(self, main, join):
    super(JoinModel, self).__init__(main, join)
    self.bridge = _detect_bridge(main, join)
</t>
<t tx="2014fall.20140821113240.3070">def build_bridge(func):
    def _func(self, *args, **kwargs):
        self.runtime.data[RT_WH].append(
            self.bridge == self.bridge.reference)
        return func(self, *args, **kwargs)
    return _func
</t>
<t tx="2014fall.20140821113240.3071">@build_bridge
def select(self, *lst):
    return super(JoinModel, self).select(*lst)
</t>
<t tx="2014fall.20140821113240.3072">@build_bridge
def update(self, *lst):
    return super(JoinModel, self).update(*lst)
</t>
<t tx="2014fall.20140821113240.3073">@build_bridge
def delete(self, *targets):
    return super(JoinModel, self).delete(*targets)
</t>
<t tx="2014fall.20140821113240.3074">def _detect_bridge(m, n):
    # detect foreignkey point between m and n
    models = (m, n)

    for i, k in enumerate(models):
        for field in k.fields.values():
            j = models[1 ^ i]
            if field.is_foreignkey and field.reference is j.primarykey:
                return field
    raise ForeignKeyNotFound
</t>
<t tx="2014fall.20140821113240.3105"># -*- coding: utf-8 -*-
'''
Copyright © 2014 Chiaming Yen

Pygroup is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Pygroup is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Pygroup. If not, see &lt;http://www.gnu.org/licenses/&gt;.

***********************************************************************
'''
########################### 1. 導入所需模組
@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
########################### 4. 安排啟動設定
# 配合程式檔案所在目錄設定靜態目錄或靜態檔案
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        'images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        'downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        'brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        'calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"},
        # 設定靜態 templates 檔案目錄對應
        '/templates':{
        'tools.staticdir.on': True,
        'tools.staticdir.root': template_root_dir,
        'tools.staticdir.dir': 'templates',
        'tools.staticdir.index' : 'index.htm'
        }
    }

########################### 5. 在近端或遠端啟動程式
# 利用 Pygroup() class 產生案例物件
root = Pygroup()
# 導入 CMSimply 內容管理模組
#root.cmsimply = cmsimply.CMSimply()
# 使用命名節點中所定義的 cmsimply_group 類別
#root.cmsimply = cmsimply_group()
root.cmsimply = cmsimply.CMSimply()
# 導入 Download
root.cmsimply.download = cmsimply.Download()

if __name__ == '__main__':
    # 假如在 os 環境變數中存在 'OPENSHIFT_REPO_DIR', 表示程式在 OpenShift 環境中執行
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        # 雲端執行啟動
        application = cherrypy.Application(root, config = application_conf)
    else:
        # 近端執行啟動
        '''
        cherrypy.server.socket_port = 8083
        cherrypy.server.socket_host = '127.0.0.1'
        '''
        cherrypy.quickstart(root, config = application_conf)
</t>
<t tx="2014fall.20140821113240.3106">import cherrypy
import os
### for logincheck
import smtplib
from email.mime.text import MIMEText  
from email.header import Header
### for cmsimply
import cmsimply
### 取得目前時區時間
from time import strftime, localtime
import datetime, pytz
### for pagination
import math
# for mako
from mako.template import Template
from mako.lookup import TemplateLookup
# for bs4
from bs4 import BeautifulSoup, Comment
# 計算執行時間
import time
# for mysql
import pymysql
# for skylark
#from skylark import Database, Model, Field, PrimaryKey, ForeignKey
# use cgi.escape() to resemble php htmlspecialchars()
# use cgi.escape() or html.escape to generate data for textarea tag, otherwise Editor can not deal with some Javascript code.
import cgi
# for logincheck and parse_config methods
import hashlib
# for unescape content
import html.parser
# for logging
import logging
# for strip_tags
import re
# for sqlite
import sqlite3
# 用於 pybean 資料儲存
from pybean import Store, SQLiteWriter
# 再 try peewee
from peewee import SqliteDatabase, Model, CharField, TextField, IntegerField, MySQLDatabase

#logging.basicConfig(level=logging.DEBUG)

#logger = logging.getLogger( __name__ )

########################### 2. 設定近端與遠端目錄
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    template_root_dir = os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static"
    # template_root_dir = _curdir + "/static"
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
    template_root_dir = _curdir + "/static"
# 資料庫選用
# 內建使用 sqlite3
ormdb = "sqlite"
#ormdb = "mysql"
#ormdb = "postgresql"
if ormdb == "sqlite":
    # 針對 sqlite3 指定資料庫檔案
    db = SqliteDatabase(data_dir+"task.db", check_same_thread=False)

elif ormdb == "mysql":
    # 選用 MySQL
    # 注意 port 必須為整數, 而非字串
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        db = MySQLDatabase(database='cadp', host=os.environ[str('OPENSHIFT_MYSQL_DB_HOST')],  \
            port=int(os.environ['OPENSHIFT_MYSQL_DB_PORT']), \
            user=os.environ['OPENSHIFT_MYSQL_DB_USERNAME'], \
            passwd=os.environ['OPENSHIFT_MYSQL_DB_PASSWORD'], charset='utf8')
    else:
        # peewee 版本
        db = MySQLDatabase(database='yourdb', host='yourhost', \
             port=3306, user='youruser', passwd='yourpassword', charset='utf8')
else:
    # 選用 PostgreSQL
    # 注意 port 必須為整數, 而非字串
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        db = PostgreSQLDatabase(database='cadp', host=os.environ[str('OPENSHIFT_POSTGRESQL_DB_HOST')],  \
            port=int(os.environ['OPENSHIFT_POSTGRESQL_DB_PORT']), \
            user=os.environ['OPENSHIFT_POSTGRESQL_DB_USERNAME'], \
            passwd=os.environ['OPENSHIFT_POSTGRESQL_DB_PASSWORD'], charset='utf8')
    else:
        # peewee 版本
        db = PostgreSQLDatabase(database='cadp', host='localhost', \
             port=3306, user='root', passwd='root', charset='utf8')
</t>
<t tx="2014fall.20140821113240.3107"># 在此建立資料表欄位
    
class Task(Model):
    # peewee 內定 id 為 PrimaryKey
    #id = PrimaryKey()
    follow = IntegerField()
    owner = CharField()
    name = CharField()
    type = CharField()
    time = CharField()
    content = TextField()
    ip = CharField()

    class Meta:
        database = db # This model uses the data_dir+"task.db" database.
</t>
<t tx="2014fall.20140821113240.3108">########################### 3. 建立主物件
class Pygroup(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    #'tools.sessions.locking' : 'explicit',
    'tools.sessions.locking' : 'early',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60,
    'tools.caching.on' : False
    }
    
    @others
</t>
<t tx="2014fall.20140821113240.3109">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(download_root_dir+"downloads"):
        try:
            os.makedirs(download_root_dir+"downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"images"):
        try:
            os.makedirs(download_root_dir+"images")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"tmp"):
        try:
            os.makedirs(download_root_dir+"tmp")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"calc_programs"):
        try:
            os.makedirs(data_dir+"calc_programs")
        except:
            print("mkdir error")
    # 若無字典檔案, 則從 local_目錄中複製
    #if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        #if not os.path.isfile(data_dir+"webster_vocabulary.sqlite"):
            # 尚未完成
    # 假如沒有 adsense_content 則建立一個空白檔案
    if not os.path.isfile(data_dir+"adsense_content"):
        try:
            file = open(data_dir+"adsense_content", "w", encoding="utf-8")
            #  寫入內建的 adsense_content 內容
            adsense_content = '''
&lt;script type="text/javascript"&gt;&lt;!--
		google_ad_client = "pub-2140091590744860";
		google_ad_width = 300;
		google_ad_height = 250;
		google_ad_format = "300x250_as";
		google_ad_type = "image";
		google_ad_channel ="";
		google_color_border = "000000";
		google_color_link = "0000FF";
		google_color_bg = "FFFFFF";
		google_color_text = "000000";
		google_color_url = "008000";
		google_ui_features = "rc:0";
		//--&gt;&lt;/script&gt;
		&lt;script type="text/javascript"
		src="http://pagead2.googlesyndication.com/pagead/show_ads.js"&gt;
		&lt;/script&gt;

&lt;script type="text/javascript"&gt;&lt;!--
		google_ad_client = "pub-2140091590744860";
		google_ad_width = 300;
		google_ad_height = 250;
		google_ad_format = "300x250_as";
		google_ad_type = "image";
		google_ad_channel ="";
		google_color_border = "000000";
		google_color_link = "0000FF";
		google_color_bg = "FFFFFF";
		google_color_text = "000000";
		google_color_url = "008000";
		google_ui_features = "rc:0";
		//--&gt;&lt;/script&gt;
		&lt;script type="text/javascript"
		src="http://pagead2.googlesyndication.com/pagead/show_ads.js"&gt;
		&lt;/script&gt;&lt;br /&gt;
'''
            file.write(adsense_content+"\n")
            file.close()
        except:
            print("mkdir error")
    if ormdb == "sqlite":
        # 資料庫使用 SQLite
        # 這裡應該要使用 peewee 建立資料庫與表格
        try:
            conn = sqlite3.connect(data_dir+"task.db")
            cur = conn.cursor()
            # 建立資料表
            cur.execute("CREATE TABLE IF NOT EXISTS task( \
                    id INTEGER PRIMARY KEY AUTOINCREMENT, \
                    name TEXT, \
                    owner TEXT, \
                    type TEXT, \
                    time TEXT, \
                    content TEXT, \
                    ip TEXT, \
                    follow INTEGER);")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
    elif ormdb == "mysql":
        # 嘗試建立資料庫與資料表
        # 這裡應該要使用 peewee 建立資料庫與表格
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            host=str(os.environ[str('OPENSHIFT_MYSQL_DB_HOST')])
            port=int(os.environ[str('OPENSHIFT_MYSQL_DB_PORT')])
            db='cadp'
            user=str(os.environ[str('OPENSHIFT_MYSQL_DB_USERNAME')])
            passwd=str(os.environ[str('OPENSHIFT_MYSQL_DB_PASSWORD')])
        else:
            host="yourhost"
            port=3306
            db='yourdb'
            user='youruser'
            passwd='yourpassword'
        charset='utf8'
        # 案例建立時, 就嘗試建立資料庫與資料表
        try:
            conn = pymysql.connect(host=host, port=port, user=user, passwd=passwd, charset=charset)
            # 建立資料庫
            cur = conn.cursor()
            cur.execute("CREATE DATABASE IF NOT EXISTS "+db+" CHARACTER SET UTF8;")
            # 建立資料表
            cur.execute("USE "+db+";")
            cur.execute("CREATE TABLE IF NOT EXISTS `task` ( \
                `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, \
                `name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `time` DATETIME NOT NULL COLLATE 'utf8_unicode_ci', \
                `content` LONGTEXT COLLATE 'utf8_unicode_ci', \
                `ip` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0', \
                PRIMARY KEY (`id`)) \
                COLLATE='utf8_general_ci' default charset=utf8 ENGINE=InnoDB;")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
    else:
        # 使用 PostgreSQL
        # 嘗試建立資料庫與資料表
        # 這裡應該要使用 peewee 建立資料庫與表格
        if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
            host=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_HOST')])
            port=int(os.environ[str('OPENSHIFT_POSTGRESQL_DB_PORT')])
            db='cadp'
            user=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_USERNAME')])
            passwd=str(os.environ[str('OPENSHIFT_POSTGRESQL_DB_PASSWORD')])
        else:
            host="localhost"
            port=3306
            db='cadp'
            user='root'
            passwd='root'
        charset='utf8'
        # 案例建立時, 就嘗試建立資料庫與資料表
        try:
            conn = pymysql.connect(host=host, port=port, user=user, passwd=passwd, charset=charset)
            # 建立資料庫
            cur = conn.cursor()
            cur.execute("CREATE DATABASE IF NOT EXISTS "+db+";")
            # 建立資料表
            cur.execute("USE "+db+";")
            cur.execute("CREATE TABLE IF NOT EXISTS `task` ( \
                `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, \
                `name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci', \
                `type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `time` DATETIME NOT NULL COLLATE 'utf8_unicode_ci', \
                `content` LONGTEXT COLLATE 'utf8_unicode_ci', \
                `ip` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci', \
                `follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0', \
                PRIMARY KEY (`id`)) \
                COLLATE='utf8_general_ci' default charset=utf8 ENGINE=InnoDB;")
            cur.close()
            conn.close()
        except:
            print("can not create db and table")
</t>
<t tx="2014fall.20140821113240.3111">@cherrypy.expose
def usermenu(self):
    # 這裡包括列出用戶以及列印表單
    user = self.printuser()
    menu = ["login", "logout", "usermenu", "cmsimply", \
                 "tasklist"]
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 usermenu.html
    mytemplate = template_lookup.get_template("usermenu.html")
    return mytemplate.render(user=user, menu=menu)
</t>
<t tx="2014fall.20140821113240.3112">def printuser(self):
    # 取得 user 資料
    try:
        user = cherrypy.session["user"]
    except:
        user = "anonymous"
    if user == "":
        user = "anonymous"
    return user
</t>
<t tx="2014fall.20140821113240.3113"># 不允許使用者直接呼叫 taskform
def taskform(self, id=0, *args, **kwargs):
    user = self.printuser()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasklist.html
    # 針對 id != 0 時, 表示要回應主資料緒, 希望取出與 id 對應的資料標頭, 然後加上 Re:
    mytemplate = template_lookup.get_template("taskform.html")
    return mytemplate.render(user=user, id=id)
</t>
<t tx="2014fall.20140821113240.3114">@cherrypy.expose
def taskaction(self, type=None, name=None, follow=0, content=None, ip=None, *args, **kwargs):
    if content == None or name == "":
        return "標題與內容都不可空白!&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        start_time = time.time()
        owner = self.printuser()
        if self.allow_pass(owner) == "no":
            raise cherrypy.HTTPRedirect("login")
        ip = self.client_ip()
        now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
        '''
        # 因為登入後就將 @ 代換為 _at_, 所以此地不用再換
        # user 若帶有 @ 則用 at 代替
        if "@" in owner:
            owner = owner.replace('@', '_at_')
        '''
        content = content.replace('\n', '')
        valid_tags = ['a', 'br', 'h1', 'h2', 'h3', 'p', 'div', 'hr', 'img', 'iframe', 'li', 'ul', 'b', 'ol', 'pre']
        tags = ''
        for tag in valid_tags:
            tags += tag
        content = self.strip_tags(content, tags)
        # 這裡要除掉 &lt;/br&gt; 關閉 break 的標註, 否則在部分瀏覽器會產生額外的跳行
        content = str(content).replace('&lt;/br&gt;', '')
        time_elapsed = round(time.time() - start_time, 5)
        # last insert id 為 data.id
        db.connect()
        # peewee 版本
        data = Task.create(owner=owner, name=str(name), type=type, time=str(now), follow=follow, content=content, ip=str(ip))
        data.save()
        # 這裡要與 taskedit 相同, 提供回到首頁或繼續編輯按鈕
        output = "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        output +="&lt;a href='/taskeditform?id="+str(data.id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
        owner:'''+owner+'''&lt;br /&gt;
        name:'''+name+'''&lt;br /&gt;
        type:'''+type+'''&lt;br /&gt;
        time:'''+str(now)+'''&lt;br /&gt;
        content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
        &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
    '''
        output +="&lt;a href='/taskeditform?id="+str(data.id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        db.close()
        return output
    # 原先直接轉到 tasklist 方法 (index)
    #raise cherrypy.HTTPRedirect("tasklist")
</t>
<t tx="2014fall.20140821113240.3115">@cherrypy.expose
# 從 tasklist 改為 index
def index(self, page=1, item_per_page=5, id=0, flat=0, desc=0, keyword=None, *args, **kwargs):
    user = self.printuser()
    # 這裡不用 self.allow_pass 原因在於需要 adsense 變數
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if user == "anonymous" and anonymous != "yes":
        if id != 0:
            raise cherrypy.HTTPRedirect("login?id="+id)
        else:
            raise cherrypy.HTTPRedirect("login")
    if adsense == "yes":
        filename = data_dir+"adsense_content"
        with open(filename, encoding="utf-8") as file:
            adsense_content = file.read()
    else:
        adsense_content = ""
    #ip = cherrypy.request.remote.ip
    ip = self.client_ip()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasklist2.html
    mytemplate = template_lookup.get_template("tasklist.html")
    # 這裡要加入單獨根據 id 號, 列出某一特定資料緒的分支
    # 若 id 為 0 表示非指定列出各別主緒資料, 而是列出全部資料
    # 這時可再根據各筆資料列印時找出各主緒資料的附屬資料筆數
    # 加入 flat = 1 時, 列出所有資料
    # 請注意這裡直接從 tasksearchform.html 中的關鍵字查詢, 指定以 tasklist 執行, 但是無法單獨列出具有關鍵字的 task 資料, 而是子緒有關鍵字時, 也是列出主緒資料
    # 單獨 db 連結與結束
    db.connect()
    if keyword == None:
        if id == 0:
            if flat == 0:
                # 只列出主資料緒
                # desc 為 0 表示要 id 由小到大排序列出資料
                if desc == 0:
                    method = "?"
                    data = Task.select().where(Task.follow==0)
                else:
                    # desc 為 1 表示 id 反向排序
                    method = "?desc=1"
                    data = Task.select().where(Task.follow==0).order_by(Task.id.desc())
            else:
                # flat 為 1 表示要列出所有資料
                # 原先沒有反向排序, 內建使用正向排序
                if desc == 0:
                    method = "?flat=1"
                    data = Task.select()
                else:
                    method = "?flat=1&amp;desc=1"
                    data = Task.select().order_by(Task.id.desc())
        else:
            method = "?id="+str(id)
            # 設法列出主資料與其下屬資料緒, 這裡是否可以改為 recursive 追蹤多緒資料
            # 只列出主緒與下一層子緒資料
            data = Task.select().where((Task.id == id) | (Task.follow == id))
    else:
        # 有關鍵字查詢時(只查 owner, content, type 與 name), 只列出主資料緒
        #flat = 1
        method = "?keyword="+keyword+"&amp;flat="+str(flat)
        data = Task.select().where((Task.content ** ('%%%s%%' % (keyword))) | (Task.name ** ('%%%s%%' % (keyword))) | \
        (Task.owner ** ('%%%s%%' % (keyword))) | \
        (Task.type ** ('%%%s%%' % (keyword))) \
            )
    follow = []
    for task in data:
        follow_data = Task.select().where(Task.follow == task.id).count()
        follow.append(follow_data)
    db.close()
    #
    # 送出 user, id, flat, method 與 data
    #
    # 增加傳送 read_only, 若 read_only = yes 則不列出 taskform, 而且所有新增編輯刪除功能均失效
    #
    return mytemplate.render(user=user, id=id, flat=flat, method=method, data=data,  \
        page=page, item_per_page=item_per_page, ip=ip, follow=follow, keyword=keyword, \
        adsense_content=adsense_content, adsense=adsense, anonymous=anonymous, \
        site_closed=site_closed, read_only=read_only)
    # 其餘分頁 logic 在 mako template tasklist.html 中完成
</t>
<t tx="2014fall.20140821113240.3117">def client_ip(self):
    try:
        return cherrypy.request.headers["X-Forwarded-For"]
    except:
        return cherrypy.request.headers["Remote-Addr"]
</t>
<t tx="2014fall.20140821113240.3118"># default method, if there is no corresponding method, cherrypy will redirect to default method
# need *args and **kwargs as input variables for all possible URL links
@cherrypy.expose
# default can not live with calc method?
def default(self, attr='default', *args, **kwargs):
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="2014fall.20140821113240.3119">@cherrypy.expose
def save_program(self, filename=None, sheet_content=None):
    with open(data_dir+"/calc_programs/"+filename, "wt", encoding="utf-8") as out_file:
        data = sheet_content.replace("\r\n", "\n")
        out_file.write(data)

    return str(filename)+" saved!&lt;br /&gt;"
@cherrypy.expose
</t>
<t tx="2014fall.20140821113240.3127">@cherrypy.expose
def logincheck(self, id=0, account=None, password=None):
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if account != None and password != None:
        # 這裡要加入用戶名稱為 admin 的管理者登入模式
        if account == "admin":
            # 進入 admin 密碼查驗流程
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
            if hashed_password == saved_password:
                cherrypy.session['user'] = "admin"
                raise cherrypy.HTTPRedirect("/?id="+str(id))
            else:
                return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        else:
            # 一般帳號查驗
            if site_closed == "yes":
                return "抱歉!網站關閉中"
            elif not mail_suffix in account or mail_suffix != "":
                return "抱歉!此類帳號不允許登入"
            else:
                server = smtplib.SMTP('smtp.gmail.com:587')
                server.ehlo()
                server.starttls()
                try:
                    server.login(account, password)
                    server.quit()
                    if "@" in account:
                        account = account.replace('@', '_at_')
                    cherrypy.session["user"] = account
                    #return account+" login successfully."
                    #若登入成功, 則離開前跳到根目錄
                except:
                    server.quit()
                    return "login failed.&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        raise cherrypy.HTTPRedirect("login?id="+str(id))
    raise cherrypy.HTTPRedirect("/?id="+str(id))
</t>
<t tx="2014fall.20140821113240.3128">@cherrypy.expose
def logout(self, *args, **kwargs):
    cherrypy.session.delete()
    return "已經登出!&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    #raise cherrypy.HTTPRedirect("")
</t>
<t tx="2014fall.20140821113240.3129">@cherrypy.expose
def taskeditform(self, id=None, *args, **kwargs):
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    else:
        try:
            db.connect()
            # 用 get() 取單筆資料
            data = Task.select().where(Task.id==int(id)).get()
            output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
            if user != data.owner:
                if user != "admin":
                    db.close()
                    return output + "error! Not authorized!"
                else:
                    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                    mytemplate = template_lookup.get_template("taskeditform.html")
                    db.close()
                    return mytemplate.render(user=user, id=id, data=data)
            else:
                template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                mytemplate = template_lookup.get_template("taskeditform.html")
                db.close()
                return mytemplate.render(user=user, id=id, data=data)
        except:
            db.close()
            return "error! Not authorized!"
</t>
<t tx="2014fall.20140821113240.3130">@cherrypy.expose
def taskedit(self, id=None, type=None, name=None, content=None, *args, **kwargs):
    # check user and data owner
    if id == None:
        return "error&lt;br /&gt;&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    try:
        db.connect()
    except:
        time.sleep(0.300)
        db.connect()
    data = Task.select().where(Task.id==int(id)).get()
    now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
    # 過濾資料
    content = content.replace('\n', '')
    valid_tags = ['a', 'br', 'h1', 'h2', 'h3', 'p', 'div', 'hr', 'img', 'iframe', 'li', 'ul', 'b', 'ol', 'pre']
    tags = ''
    for tag in valid_tags:
        tags += tag
    content = self.strip_tags(content, tags)
    # 這裡要除掉 &lt;/br&gt; 關閉 break 的標註, 否則在部分瀏覽器會產生額外的跳行
    content = str(content).replace('&lt;/br&gt;', '')
    output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
    if user != data.owner:
        if  user != "admin":
            db.close()
            return "error! Not authorized!"
        else:
            # 請注意這裡曾經犯了 where(id==int(id) 的重大錯誤, 讓所有資料在 update 時只留下一筆資料
            query = Task.update(type=type, name=name, content=str(content), time=str(now)).where(Task.id==int(id))
            query.execute()
            output += "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
            output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
            output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
            owner:'''+data.owner+'''&lt;br /&gt;
            name:'''+name+'''&lt;br /&gt;
            type:'''+type+'''&lt;br /&gt;
            time:'''+str(now)+'''&lt;br /&gt;
            content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
            output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;"
    else:
        query = Task.update(type=type, name=name, content=str(content), time=str(now)).where(Task.id==int(id))
        query.execute()
        output += "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
        output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        output += '''以下資料已經更新:&lt;br /&gt;&lt;br /&gt;
        owner:'''+data.owner+'''&lt;br /&gt;
        name:'''+name+'''&lt;br /&gt;
        type:'''+type+'''&lt;br /&gt;
        time:'''+str(now)+'''&lt;br /&gt;
        content:'''+str(content)+'''&lt;br /&gt;&lt;br /&gt;
        &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
        output +="&lt;a href='/taskeditform?id="+str(id)+"'&gt;繼續編輯&lt;/a&gt;&lt;br /&gt;"
    db.close()
    return output
</t>
<t tx="2014fall.20140821113240.3131">@cherrypy.expose
def taskdeleteform(self, id=None, *args, **kwargs):
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    else:
        try:
            # 這裡要區分刪除子緒或主緒資料
            # 若刪除子緒, 則 data 只包含子緒資料, 若為主緒, 則 data 必須包含所有資料
            # 先找出資料, 判定是否為主緒
            # 用 get() 取單筆資料
            db.connect()
            data= Task.select().where(Task.id==int(id)).get()
            owner = data.owner
            if user != data.owner:
                if user != "admin":
                    db.close()
                    return output + "error! 非資料擁有者, Not authorized!"
                else:
                    if data.follow == 0:
                        # 表示該資料為主緒資料
                        # 資料要重新搜尋, 納入子資料
                        data = Task.select().where((Task.id == id) | (Task.follow == id))
                        output = "資料為主緒資料&lt;br /&gt;"
                        # 增加一個資料類型判斷, main 表資料為主緒
                        type = "main"
                    else:
                        # 表示該資料為子緒資料
                        # 直接採用 data 資料送到 taskdeleteform.html
                        output = "資料為子緒資料&lt;br /&gt;"
                        # 增加一個資料類型判斷, alone 表資料為子緒
                        type = "alone"
                    output += "user:"+user+", owner:"+owner+"&lt;br /&gt;&lt;br /&gt;"
                    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                    mytemplate = template_lookup.get_template("taskdeleteform.html")
                    # 這裡的 type 為所要刪除資料的類型, 為 main 或為 alone
                    db.close()
                    return mytemplate.render(user=user, id=id, data=data, type=type)
            else:
                if data.follow == 0:
                    # 表示該資料為主緒資料
                    # 資料要重新搜尋, 納入子資料
                    data = Task.select().where((Task.id == id) | (Task.follow == id))
                    output = "資料為主緒資料&lt;br /&gt;"
                    # 增加一個資料類型判斷, main 表資料為主緒
                    type = "main"
                else:
                    # 表示該資料為子緒資料
                    # 直接採用 data 資料送到 taskdeleteform.html
                    output = "資料為子緒資料&lt;br /&gt;"
                    # 增加一個資料類型判斷, alone 表資料為子緒
                    type = "alone"
                output += "user:"+user+", owner:"+owner+"&lt;br /&gt;&lt;br /&gt;"
                template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
                mytemplate = template_lookup.get_template("taskdeleteform.html")
                # 這裡的 type 為所要刪除資料的類型, 為 main 或為 alone
                db.close()
                return mytemplate.render(user=user, id=id, data=data, type=type)
        except:
            db.close()
            return "error! 無法正確查詢資料, Not authorized!"
</t>
<t tx="2014fall.20140821113240.3132">@cherrypy.expose
def taskdelete(self, id=None, type=None, name=None, content=None, *args, **kwargs):
    # check user and data owner
    user = self.printuser()
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if read_only == "yes" and user != "admin":
        return "&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;error, site is read only!"
    if user == "anonymous" and anonymous != "yes":
        raise cherrypy.HTTPRedirect("login")
    # 用 get() 取單筆資料
    db.connect()
    data = Task.select().where(Task.id==int(id)).get()
    now = datetime.datetime.now(pytz.timezone('Asia/Taipei')).strftime('%Y-%m-%d %H:%M:%S')
    output = "user:"+user+", owner:"+data.owner+"&lt;br /&gt;&lt;br /&gt;"
    if user != data.owner:
        if user != "admin":
            db.close()
            return "error! Not authorized!"
        else:
            # 若資料為主緒則一併刪除子緒, 若為子緒, 則只刪除該子緒
            if data.follow == 0:
                # 表示資料為主緒
                # 先刪除主緒
                query = Task.at(int(id)).delete()
                query.execute()
                # 再刪除所有對應子緒
                query = Task.delete().where(follow=int(id))
                query.execute()
                output += "所有序列資料已經刪除!&lt;br /&gt;"
            else:
                # 表示資料為子緒
                query = Task.delete().where(Task.id==int(id))
                query.execute()
                output += "資料已經刪除!&lt;br /&gt;"
    else:
        # 若資料為主緒則一併刪除子緒, 若為子緒, 則只刪除該子緒
        if data.follow == 0:
            # 表示資料為主緒
            # 先刪除主緒
            query = Task.delete().where(Task.id==int(id))
            query.execute()
            # 再刪除所有對應子緒
            query = Task.delete().where(Task.follow==int(id))
            query.execute()
            output += '''所有序列資料已經刪除!&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
        else:
            # 表示資料為子緒
            query = Task.delete().where(Task.id==int(id))
            query.execute()
            output += '''資料已經刪除!&lt;br /&gt;&lt;br /&gt;
            &lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;
'''
    db.close()
    return output
</t>
<t tx="2014fall.20140821113240.3133"># 不允許使用者直接呼叫 tasksearchform
def tasksearchform(self, *args, **kwargs):
    user = self.printuser()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    # 必須要從 templates 目錄取出 tasksearchform.html
    mytemplate = template_lookup.get_template("tasksearchform.html")
    return mytemplate.render(user=user)
</t>
<t tx="2014fall.20140821113240.3137">########################### 1. 導入啟動 cherrypy, 所在目錄, 物件所需模組
@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
</t>
<t tx="2014fall.20140821113240.3138">import cherrypy
import os
import cmsimply
import pygroup
# for createdb 
import pymysql
# for webster and wordnet
import wordnet
import webster

########################### 2. 設定近端與遠端目錄
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
    template_root_dir = os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/static"
    # template_root_dir = _curdir + "/static"
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
    template_root_dir = _curdir + "/static"

########################### 3. 設定根目錄與子目錄啟動
# 利用 CDProject() class 產生案例物件
#root = CDProject()
# 希望從物件案例建立時, 指定資料庫與資料表的建立流程
# 例如 root = pygroup.Pygroup(資料庫, 資料表, 其他參數)
root = pygroup.Pygroup()
# 導入 CMSimply 內容管理模組
#root.cmsimply = cmsimply.CMSimply()
# 使用命名節點中所定義的 cmsimply_group 類別
#root.cmsimply = cmsimply_group()
root.c = cmsimply.CMSimply()
# 導入 Download
root.c.download = cmsimply.Download()
# 從 wordnet 與 webster 模組建立應用案例
root.wordnet = wordnet.MyCheck()
root.webster = webster.MyCheck()

########################### 4. 安排啟動設定
# 配合程式檔案所在目錄設定靜態目錄或靜態檔案
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        '/calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"},
        # 設定靜態 templates 檔案目錄對應
        '/templates':{
        'tools.staticdir.on': True,
        'tools.staticdir.root': template_root_dir,
        'tools.staticdir.dir': 'templates',
        'tools.staticdir.index' : 'index.htm'
        }
    }

########################### 5. 在近端或遠端啟動程式
# 假如在 os 環境變數中存在 'OPENSHIFT_REPO_DIR', 表示程式在 OpenShift 環境中執行
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 雲端執行啟動
    application = cherrypy.Application(root, config = application_conf)
else:
    # 近端執行啟動
    '''
    cherrypy.server.socket_port = 8443
    cherrypy.server.socket_host = 'your_ip'
    cherrypy.server.ssl_certificate = 'new_pygroup/wsgi/ssl_cert.pem'
    cherrypy.server.ssl_private_key = 'new_pygroup/wsgi/ssl_cert.pem'
    cherrypy.config.update({'engine.autoreload.on':False,
                        'log.access_file': data_dir+'/downloads/access.log',
                        'log.error_file': data_dir+'/downloads/error.log'})
    '''
    # 避開 winreg 模組無法找到的問題"
    # Ubuntu 14.04, Python 3.4.0, CherryPy 3.5.0
    cherrypy.config.update({'engine.autoreload_on':False})
    # 若在近端以 Python 直接執行, 則使用下一行啟動
    cherrypy.quickstart(root, config = application_conf)
    # 若在近端使用 uwsgi 啟動則與 OpenShift 平台上的啟動方式相同
    #application = cherrypy.Application(root, config = application_conf)
</t>
<t tx="2014fall.20140821113240.3139">https://pypi.python.org/pypi/skylark/0.9.0

https://github.com/hit9/skylark

http://skylark.readthedocs.org/en/latest/</t>
<t tx="2014fall.20140821113240.3140">管理者帳號

一般用戶帳號

    利用 smtplib 與 Gmail 伺服器, 驗證使用者的帳號密碼</t>
<t tx="2014fall.20140821113240.3141"></t>
<t tx="2014fall.20140821113240.3142">CREATE TABLE `sforum` (
  `id` INTEGER PRIMARY KEY,
  `wid`,
  `for_ptitle`,
  `for_text` ,
  `for_mail` ,
  `for_data`,
  `for_dataw`,
  `for_ip`,
  `for_name`
, "uploadfile")

CREATE TABLE `uploadfile` (
  `serial` INTEGER PRIMARY KEY,
  `tablename`,
  `follow`,
  `version` ,
  `fileorder` ,
  `filename`,
  `filesize`
)</t>
<t tx="2014fall.20140821113240.3143">MySQL:

CREATE TABLE `task` (
	`id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci',
	`owner` VARCHAR(255) NOT NULL COLLATE 'utf8_unicode_ci',
	`type` VARCHAR(255) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci',
	`time` DATETIME NOT NULL,
	`content` LONGTEXT NULL COLLATE 'utf8_unicode_ci',
	`ip` VARCHAR(64) NULL DEFAULT NULL COLLATE 'utf8_unicode_ci',
	`follow` BIGINT(20) UNSIGNED NOT NULL DEFAULT '0',
	PRIMARY KEY (`id`)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;

SQLite:

CREATE TABLE task(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            owner TEXT,
            type TEXT,
            time TEXT,
            content TEXT,
            ip TEXT,
            follow INTEGER)
</t>
<t tx="2014fall.20140821113240.3144">http://skylark.readthedocs.org/en/latest/cases.html#pagination</t>
<t tx="2014fall.20140821113240.3145">http://www.heidisql.com/</t>
<t tx="2014fall.20140821113240.3146">功能討論

http://cadp-cmsimplydemo.rhcloud.com/tasklist?id=59</t>
<t tx="2014fall.20140821113240.3147">假如在 OpenShift 上要使用 Adsense, 唯一的方法是採用客製化符號名稱

原因是 rhcloud.com 用戶眾多, 只要一個網站違反 Google 規定, 整個網域都無法使用 Adsense</t>
<t tx="2014fall.20140826101705.2629">#
# -*- coding: utf-8 -*-
'''
Copyright © 2014 Chiaming Yen

CMSimply is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CMSimply is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CMSimply. If not, see &lt;http://www.gnu.org/licenses/&gt;.

***********************************************************************
'''

@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
root = CMSimply()
root.download = Download()

# setup static, images and downloads directories
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        '/calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"}
    }

# if inOpenshift ('OPENSHIFT_REPO_DIR' exists in environment variables) or not inOpenshift
if __name__ == '__main__':
    if inOpenshift:
        # operate in OpenShift
        application = cherrypy.Application(root, config = application_conf)
    else:
        # operate in localhost
        cherrypy.quickstart(root, config = application_conf)
</t>
<t tx="2014fall.20140826101705.2630">import cherrypy
import re
import os
import math
import hashlib
from cherrypy.lib.static import serve_file
# use quote_plus() to generate URL
import urllib.parse
# use cgi.escape() to resemble php htmlspecialchars()
# use cgi.escape() or html.escape to generate data for textarea tag, otherwise Editor can not deal with some Javascript code.
import cgi

# get the current directory of the file
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
import sys
sys.path.append(_curdir)

if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    inOpenshift = True
else:
    inOpenshift = False

if inOpenshift:
    # while program is executed in OpenShift
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # while program is executed in localhost
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"


</t>
<t tx="2014fall.20140826101705.2631">def downloadlist_access_list(files, starti, endi):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_root_dir+"downloads/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/c/flvplayer?filepath=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='"+files[index]+"'&gt;&lt;a href='download/?filepath="+download_root_dir.replace('\\', '/')+ \
            "downloads/"+files[index]+"'&gt;"+files[index]+"&lt;/a&gt; ("+str(fileSize)+")&lt;br /&gt;"
    return outstring
</t>
<t tx="2014fall.20140826101705.2632">def imagelist_access_list(files, starti, endi):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_root_dir+"images/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/images/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'

    return outstring
</t>
<t tx="2014fall.20140826101705.2633">def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB']:
        if num &lt; 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')
</t>
<t tx="2014fall.20140826101705.2634"># set_admin_css for administrator
def set_admin_css():
    outstring = '''&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;CMSimply - Simple Cloud CMS in Python 3&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
'''+syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    # SSL for OpenShift operation
    if inOpenshift:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;'''+site_title+'''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="sitemap"&gt;SiteMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'''+cherrypy.url(qs=cherrypy.request.query_string)+'''&amp;edit=1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="imageuploadform"&gt;Image Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="fileuploadform"&gt;File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download_list"&gt;File List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="logout"&gt;Logout&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring
</t>
<t tx="2014fall.20140826101705.2635">def set_footer():
    # Extra consideration for cherrypy.url(qs=cherrypy.request.query_string) return no data
    return "&lt;footer&gt; \
        &lt;a href='edit_page'&gt;Edit All&lt;/a&gt;| \
        &lt;a href='"+cherrypy.url(qs=cherrypy.request.query_string)+"&amp;edit=1'&gt;Edit&lt;/a&gt;| \
        &lt;a href='edit_config'&gt;Config&lt;/a&gt; \
        &lt;a href='login'&gt;login&lt;/a&gt;| \
        &lt;a href='logout'&gt;logout&lt;/a&gt; \
        &lt;br /&gt;Powered by &lt;a href='http://cmsimple.cycu.org'&gt;CMSimply&lt;/a&gt; \
        &lt;/footer&gt; \
        &lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2636">def file_get_contents(filename):
    # open file in utf-8 and return file content
    with open(filename, encoding="utf-8") as file:
        return file.read()
</t>
<t tx="2014fall.20140826101705.2637"># use head title to search page content
'''
# search_content(head, page, search)
# 從 head 與 page 數列中, 以 search 關鍵字進行查詢
# 原先傳回與 search 關鍵字頁面對應的頁面內容
# 現在則傳回多重的頁面次序與頁面內容數列
find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
head = ["標題一","標題二","標題三","標題一","標題四","標題五"]
search_result = find(head,["標題一"])[0]
page_order = []
page_content = []
for i in range(len(search_result)):
    # 印出次序
    page_order.append(search_result[i])
    # 標題為 head[search_result[i]]
    #  頁面內容則為 page[search_result[i]]
    page_content.append(page[search_result[i]])
    # 從 page[次序] 印出頁面內容
# 準備傳回 page_order 與 page_content 等兩個數列
'''
def search_content(head, page, search):
    ''' 舊內容
    return page[head.index(search)]
    '''
    find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
    search_result = find(head,[search])[0]
    page_order = []
    page_content = []
    for i in range(len(search_result)):
        # 印出次序
        page_order.append(search_result[i])
        # 標題為 head[search_result[i]]
        #  頁面內容則為 page[search_result[i]]
        page_content.append(page[search_result[i]])
        # 從 page[次序] 印出頁面內容
    # 準備傳回 page_order 與 page_content 等兩個數列
    return page_order, page_content
</t>
<t tx="2014fall.20140826101705.2638">def parse_content():
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(data_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(data_dir+"content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(data_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(data_dir+"content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    # deal with content has content but no heading
    # replace subject content with special seperate string to avoid error 
    subject = re.sub('#@CMSIMPLY_SPLIT@#', '井@CMSIMPLY_SPLIT@井', subject)
    content_sep = '#@CMSIMPLY_SPLIT@#'
    head_level = 3
    # remove all attribute inside h1, h2 and h3 tags
    subject = re.sub('&lt;(h1|h2|h3)[^&gt;]*&gt;', r'&lt;\1&gt;', subject, flags=re.I)
    content = re.split('&lt;/body&gt;', subject)
    result = re.sub('&lt;h[1-'+str(head_level)+']&gt;', content_sep, content[0])
    # remove the first element contains html and body tags
    data = result.split(content_sep)[1:]
    head_list = []
    level_list = []
    page_list = []
    order = 1
    for index in range(len(data)):
        #page_data = re.sub('&lt;/h[1-'+str(head_level)+']&gt;', content_sep, data[index])
        page_data = re.sub('&lt;/h', content_sep, data[index])
        head = page_data.split(content_sep)[0]
        order += 1
        head_list.append(head)
        # put level data into level variable
        level = page_data.split(content_sep)[1][0]
        level_list.append(level)
        # remove  1&gt;,  2&gt; or 3&gt;
        page = page_data.split(content_sep)[1][2:]
        page_list.append(page)
    # send head to unique function to avoid duplicate heading
    #head_list = unique(head_list)
    return head_list, level_list, page_list
</t>
<t tx="2014fall.20140826101705.2639">def render_menu(head, level, page, sitemap=0):
    directory = ""
    current_level = level[0]
    if sitemap:
        directory += "&lt;ul&gt;"
    else:
        directory += "&lt;ul id='css3menu1' class='topmenu'&gt;"
    for index in range(len(head)):
        if level[index] &gt; current_level:
            directory += "&lt;ul&gt;"
            directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        elif level[index] == current_level:
            if level[index] == 1:
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
            else:
                directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        else:
            directory += "&lt;/li&gt;"*(int(current_level) - int(level[index]))
            directory += "&lt;/ul&gt;"*(int(current_level) - int(level[index]))
            if level[index] == 1:
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='/get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
            else:
                directory += "&lt;li&gt;&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
        current_level = level[index]
    directory += "&lt;/li&gt;&lt;/ul&gt;"
    return directory
</t>
<t tx="2014fall.20140826101705.2640">def filebrowser():
    return '''
&lt;script type="text/javascript"&gt;
function wrFilebrowser (field_name, url, type, win) {
poppedUpWin = win;
inputField = field_name;
if (type == "file") {type = "downloads"};
// c is the path from root.c
var cmsURL = "/c/file_selector";    

if (cmsURL.indexOf("?") &lt; 0) {
    cmsURL = cmsURL + "?type="+ type ;
}
else {
    cmsURL = cmsURL + "&amp;type="+type ;
}

tinyMCE.activeEditor.windowManager.open(
    {
        file  : cmsURL,
        width : 800,
        height : 600,
        resizable : "yes",
        inline : "yes",
        close_previous : "no",
        popup_css : false,
        scrollbars : "yes"
      },
      {
        window : win,
        input : field_name
      }
);
return false;
}
'''
</t>
<t tx="2014fall.20140826101705.2641">def syntaxhighlight():
    return '''
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shCore.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJScript.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJava.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushSql.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushXml.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPhp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCpp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCss.js"&gt;&lt;/script&gt;
&lt;link type="text/css" rel="stylesheet" href="/static/syntaxhighlighter/css/shCoreDefault.css"/&gt;
&lt;script type="text/javascript"&gt;SyntaxHighlighter.all();&lt;/script&gt;
'''
</t>
<t tx="2014fall.20140826101705.2642">def editorhead():
    return '''
&lt;script language="javascript" type="text/javascript" src="/static/tinymce3/tiny_mce/tiny_mce.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/tinymce3/init.js"&gt;&lt;/script&gt;
'''
</t>
<t tx="2014fall.20140826101705.2643">def tinymceinit():
    return '''
&lt;script language="javascript" type="text/javascript"&gt;
function tinyMCE_initialize0() {
    tinyMCE_instantiateByClasses('simply-editor', {
// General options

theme : "advanced",
width : "800",
height : "600",
element_format : "html",
language : "en",
plugins : "autolink,autosave,pagebreak,style,layer,table,save,advimage,advlink,advhr,emotions,iespell,"
        + "insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,"
        + "noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,media,lists,syntaxhl",

// Theme options
theme_advanced_buttons1 : "save,|,fullscreen,code,formatselect,fontselect,fontsizeselect,styleselect,syntaxhl",
theme_advanced_buttons2 : "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,cut,copy,paste,pastetext,pasteword,|,bullist,numlist,outdent,indent,blockquote",
theme_advanced_buttons3 : "undo,redo,|,link,unlink,anchor,image,media,cleanup,|,hr,removeformat,visualaid,|,forecolor,backcolor,|,search,replace,|,charmap",
theme_advanced_buttons4 : "emotions,sub,sup,|,tablecontrols,insertdate,inserttime,help",
theme_advanced_toolbar_location : "top",
theme_advanced_toolbar_align : "left",
theme_advanced_statusbar_location : "bottom",
theme_advanced_resizing : true,
theme_advanced_blockformats : "h1,h2,h3,p,div,h4,h5,h6,blockquote,dt,dd,code",
theme_advanced_font_sizes : "8px=8px, 10px=10px,12px=12px, 14px=14px, 16px=16px, 18px=18px,20px=20px,24px=24px,36px=36px",

content_css : "/static/cmsimply.css",
//link and image list
external_image_list_url: "/static/tinymce3/cms_image_list.js",
external_link_list_url: "/static/tinymce3/cms_link_list.js",

// Extra
plugin_insertdate_dateFormat: "%d-%m-%Y",
plugin_insertdate_timeFormat: "%H:%M:%S",
inline_styles : true,
apply_source_formatting : true,
relative_urls : true,
convert_urls: false,
entity_encoding : "raw",

file_browser_callback: "wrFilebrowser" ,
fullscreen_new_window : false ,
fullscreen_settings : {
theme_advanced_buttons1: "save,|,fullscreen,code,|,formatselect,fontselect,fontsizeselect,styleselect,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,cut,copy,paste,pastetext,pasteword,|,bullist,numlist,outdent,indent,blockquote,|,undo,redo",
theme_advanced_buttons2 : "link,unlink,anchor,image,media,cleanup,|,hr,removeformat,visualaid,|,forecolor,backcolor,|,search,replace,|,charmap,emotions,|,sub,sup,tablecontrols,insertdate,inserttime,|,help",
theme_advanced_buttons3 : "",
theme_advanced_buttons4 : ""
}
});
}
&lt;/script&gt;
'''
</t>
<t tx="2014fall.20140826101705.2644">def editorfoot():
    return '''&lt;body id="body"  onload="tinyMCE_initialize0();"&gt;'''
</t>
<t tx="2014fall.20140826101705.2645">def tinymce_editor(menu_input=None, editor_content=None, page_order=None):
    files = os.listdir(download_root_dir+"downloads/")
    link_list = ""
    image_list = ""
    for index in range(len(files)):
        file_url = "download/?filepath="+download_root_dir.replace('\\', '/')+"downloads/"+files[index]
        link_list += "['"+files[index]+"', '"+file_url+"']"
        if index != len(files)-1:
            link_list += ","
    # deal with image link
    images = os.listdir(download_root_dir+"images/")
    for index in range(len(images)):
        image_url = "/images/"+images[index]
        image_list += "['"+images[index]+"', '"+image_url+"']"
        if index != len(images)-1:
            image_list += ","
    sitecontent =file_get_contents(data_dir+"content.htm")
    editor = set_admin_css()+editorhead()+filebrowser()+'''
var myImageList = new Array('''+image_list+''');
var myLinkList = new Array('''+link_list+''');
&lt;/script&gt;'''+tinymceinit()+'''&lt;/head&gt;'''+editorfoot()
    # edit all pages
    if page_order == None:
        outstring = editor + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
            menu_input+"&lt;/nav&gt;&lt;section&gt;&lt;form method='post' action='savePage'&gt; \
     &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;"+editor_content+"&lt;/textarea&gt; \
     &lt;input type='submit' value='save'&gt;&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        # add viewpage button wilie single page editing
        head, level, page = parse_content()
        outstring = editor + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
            menu_input+"&lt;/nav&gt;&lt;section&gt;&lt;form method='post' action='ssavePage'&gt; \
     &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;"+editor_content+"&lt;/textarea&gt; \
&lt;input type='hidden' name='page_order' value='"+str(page_order)+"'&gt; \
     &lt;input type='submit' value='save'&gt;"
        outstring += '''&lt;input type=button onClick="location.href='get_page?heading='''+head[page_order]+ \
            ''''" value='viewpage'&gt;&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;'''
    return outstring
</t>
<t tx="2014fall.20140826101705.2646">def parse_config():
    if not os.path.isfile(data_dir+"config"):
        # create config file if there is no config file
        file = open(data_dir+"config", "w", encoding="utf-8")
        # default password is admin
        password="admin"
        hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        file.write("siteTitle:CMSimply - Simple Cloud CMS in Python 3\npassword:"+hashed_password)
        file.close()
    config = file_get_contents(data_dir+"config")
    config_data = config.split("\n")
    site_title = config_data[0].split(":")[1]
    password = config_data[1].split(":")[1]
    return site_title, password
</t>
<t tx="2014fall.20140826101705.2647">def file_selector_script():
    return '''
&lt;script type="text/javascript" src="/static/tinymce3/tiny_mce/tiny_mce_popup.js"&gt;&lt;/script&gt;
&lt;script language="javascript" type="text/javascript"&gt;

var FileBrowserDialogue = {
    
    init : function () {
        // Nothing to do
    },

   
    submit : function (url) {
        var URL = url;
        var win = tinyMCEPopup.getWindowArg("window");
        var input = win.document.getElementById(tinyMCEPopup.getWindowArg("input"));
        win.document.getElementById(tinyMCEPopup.getWindowArg("input")).value = URL;

        input.value = URL;
        if (input.onchange) input.onchange();

        tinyMCEPopup.close();
    }
}

tinyMCEPopup.onInit.add(FileBrowserDialogue.init, FileBrowserDialogue);

function setLink(link){

    FileBrowserDialogue.submit(link);
    return true;
}
&lt;/script&gt;
'''
</t>
<t tx="2014fall.20140826101705.2648">def file_lister(directory, type=None, page=1, item_per_page=10):
    files = os.listdir(download_root_dir+directory)
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = file_selector_script()
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            if type == "downloads":
                outstring += downloadselect_access_list(files, starti, endi)+"&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            if type == "downloads":
                outstring += downloadselect_access_list(files, starti, total_rows)+"&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type="+type+"&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type="+type+"&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"

    if type == "downloads":
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='fileuploadform'&gt;file upload&lt;/a&gt;"
    else:
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='imageuploadform'&gt;image upload&lt;/a&gt;"
</t>
<t tx="2014fall.20140826101705.2649">def downloadselect_access_list(files, starti, endi):
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(download_root_dir+"/downloads/"+files[index])
        outstring += '''&lt;input type="checkbox" name="filename" value="'''+files[index]+'''"&gt;&lt;a href="#" onclick='window.setLink("download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/downloads/'''+files[index]+'''",0); return false;'&gt;'''+ \
        files[index]+'''&lt;/a&gt; ('''+str(sizeof_fmt(fileSize))+''')&lt;br /&gt;'''
    return outstring
</t>
<t tx="2014fall.20140826101705.2650">def loadlist_access_list(files, starti, endi, filedir):
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(data_dir+filedir+"_programs/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="'+files[index]+'"&gt;&lt;a href="javascript:;" onClick="window.open(\'/c/flvplayer?filepath=/downloads/'+ \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;'+files[index]+'&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # py files
        elif fileExtension == ".py":
            outstring += '&lt;input type="radio" name="filename" value="'+files[index]+'"&gt;'+files[index]+' ('+str(fileSize)+')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='"+files[index]+"'&gt;&lt;a href='/"+filedir+"_programs/"+files[index]+"'&gt;"+files[index]+"&lt;/a&gt; ("+str(fileSize)+")&lt;br /&gt;"
    return outstring
</t>
<t tx="2014fall.20140826101705.2651">def imageselect_access_list(files, starti, endi):
    outstring = '''&lt;head&gt;
&lt;style&gt;
a.xhfbfile {padding: 0 2px 0 0; line-height: 1em;}
a.xhfbfile img{border: none; margin: 6px;}
a.xhfbfile span{display: none;}
a.xhfbfile:hover span{
    display: block;
    position: relative;
    left: 150px;
    border: #aaa 1px solid;
    padding: 2px;
    background-color: #ddd;
}
a.xhfbfile:hover{
    background-color: #ccc;
    opacity: .9;
    cursor:pointer;
}
&lt;/style&gt;
&lt;/head&gt;
'''
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(download_root_dir+"/images/"+files[index])
        outstring += '''&lt;a class="xhfbfile" href="#" onclick='window.setLink("download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/images/'''+files[index]+'''",0); return false;'&gt;'''+ \
        files[index]+'''&lt;span style="position: absolute; z-index: 4;"&gt;&lt;br /&gt;
        &lt;img src="download/?filepath='''+ \
        download_root_dir.replace('\\', '/')+'''/images/'''+files[index]+'''" width="150px"/&gt;&lt;/span&gt;&lt;/a&gt; ('''+str(sizeof_fmt(fileSize))+''')&lt;br /&gt;'''
    return outstring
</t>
<t tx="2014fall.20140826101705.2652">def sizeof_fmt(num):
    for x in ['bytes','kb','mb','gb']:
        if num &lt; 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0
    return "%3.1f %s" % (num, 'tb')
</t>
<t tx="2014fall.20140826101705.2653">def unique(items):
    found = set([])
    keep = []
    count = {}
    for item in items:
        if item not in found:
            count[item] = 0
            found.add(item)
            keep.append(item)
        else:
            count[item] += 1
            keep.append(str(item)+"_"+str(count[item]))
    return keep
</t>
<t tx="2014fall.20140826101705.2654">class CMSimply(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    # storage_type could be 'ram', 'file', 'cookie' or 'custom'
    'tools.sessions.storage_type' : 'file',
    #'tools.sessions.locking' : 'explicit',
    'tools.sessions.locking' : 'early',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60,
    # poll rate for expired session cleanup in minutes
    'tools.sessions.clean_freq': 30
    }
    
    @others
</t>
<t tx="2014fall.20140826101705.2655">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(download_root_dir+"downloads"):
        try:
            os.makedirs(download_root_dir+"downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"images"):
        try:
            os.makedirs(download_root_dir+"images")
        except:
            print("mkdir error")
    if not os.path.isdir(download_root_dir+"tmp"):
        try:
            os.makedirs(download_root_dir+"tmp")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"brython_programs"):
        try:
            os.makedirs(data_dir+"brython_programs")
        except:
            print("mkdir error")
    if not os.path.isdir(data_dir+"calc_programs"):
        try:
            os.makedirs(data_dir+"calc_programs")
        except:
            print("mkdir error")

</t>
<t tx="2014fall.20140826101705.2656">@cherrypy.expose
def index(self, heading=None, *args, **kwargs):
    head, level, page = parse_content()
    # fix first Chinese heading error
    raise cherrypy.HTTPRedirect("get_page?heading="+urllib.parse.quote_plus(head[0]))
    # the following will never execute
    directory = render_menu(head, level, page)
    if heading == None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[page_order_list[i]]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1]+" &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
        return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[page_order_list[i]]+"&lt;br /&gt;"+last_page+" "+next_page

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;"+return_content+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="2014fall.20140826101705.2657"># default method, if there is no corresponding method, cherrypy will redirect to default method
# need *args and **kwargs as input variables for all possible URL links
@cherrypy.expose
def default(self, attr='default', *args, **kwargs):
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="2014fall.20140826101705.2658">@cherrypy.expose
def error_log(self, info="Error"):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;ERROR&lt;/h1&gt;"+info+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2659">@cherrypy.expose
def login(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not self.isAdmin():
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
    Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        raise cherrypy.HTTPRedirect("edit_page")
</t>
<t tx="2014fall.20140826101705.2660">@cherrypy.expose
def logout(self):
    cherrypy.session.delete()
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="2014fall.20140826101705.2661">@cherrypy.expose
def checkLogin(self, password=None):
    site_title, saved_password = parse_config()
    hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
    if hashed_password == saved_password:
        cherrypy.session['admin'] = 1
        raise cherrypy.HTTPRedirect("edit_page")
    raise cherrypy.HTTPRedirect("/")
</t>
<t tx="2014fall.20140826101705.2662"># seperate page need heading and edit variables, if edit=1, system will enter edit mode
# single page edit will use ssavePage to save content, it means seperate save page
@cherrypy.expose
def get_page(self, heading=None, edit=0, *args, **kwargs):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    '''
    try:
        pagecontent = search_content(head, page, heading)
        page_order = head.index(heading)
    except:
        heading = head[0]
        pagecontent = page[0]
        page_order = 0
    if page_order == 0:
        # no last page
        last_page = ""
    else:
        last_page = head[page_order-1] + " &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
    if page_order == len(head) - 1:
        # no next page
        next_page = ""
    else:
        next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
    '''
    if heading == None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    pagedata = ""
    outstring = ""
    outstring_duplicate = ""
    pagedata_duplicate = ""
    outstring_list = []
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[i]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1]+" &lt;&lt; &lt;a href='get_page?heading="+head[page_order-1]+"'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='get_page?heading="+head[page_order+1]+"'&gt;Next&lt;/a&gt; &gt;&gt; "+ head[page_order+1]
        if len(page_order_list) &gt; 1:
            return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[i]+"&lt;br /&gt;"+last_page+" "+next_page+"&lt;br /&gt;&lt;hr&gt;"
            pagedata_duplicate = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+page_content_list[i]
            outstring_list.append(last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata_duplicate), page_order))
        else:
            return_content += last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+page_content_list[i]+"&lt;br /&gt;"+last_page+" "+next_page
            
        pagedata += "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+page_content_list[i]
        outstring += last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata), page_order)
    
    # edit=0 for viewpage
    if edit == 0:
        '''
        if heading == None:
            return page[0]
        else:
            return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
            directory+"&lt;/nav&gt;&lt;section&gt;"+last_page+" "+next_page+"&lt;br /&gt;&lt;h1&gt;"+heading+"&lt;/h1&gt;"+pagecontent+"&lt;br /&gt;"+last_page+" "+next_page+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
        '''
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;"+return_content+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    # enter edit mode
    else:
        # check if administrator
        if not self.isAdmin():
            raise cherrypy.HTTPRedirect("login")
        else:
            if len(page_order_list) &gt; 1:
                # 若碰到重複頁面頁印, 且要求編即, 則導向 edit_page
                #raise cherrypy.HTTPRedirect("edit_page")
                for i in range(len(page_order_list)):
                    outstring_duplicate += outstring_list[i]+"&lt;br /&gt;&lt;hr&gt;"
                return outstring_duplicate
            else:
            #pagedata = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+search_content(head, page, heading)
            #outstring = last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, cgi.escape(pagedata), page_order)
                return outstring
</t>
<t tx="2014fall.20140826101705.2663">def isAdmin(self):
    if cherrypy.session.get('admin') == 1:
            return True
    else:
        return False
</t>
<t tx="2014fall.20140826101705.2664"># edit all page content
@cherrypy.expose
def edit_page(self):
    # check if administrator
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        pagedata =file_get_contents(data_dir+"content.htm")
        outstring = tinymce_editor(directory, cgi.escape(pagedata))
        return outstring
</t>
<t tx="2014fall.20140826101705.2665">@cherrypy.expose
def savePage(self, page_content=None):
    # check if administrator
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if page_content == None:
        return self.error_log("no content to save!")
    # we need to check if page heading is duplicated
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    # in Windows client operator, to avoid textarea add extra \n
    page_content = page_content.replace("\n","")
    file.write(page_content)
    file.close()
    '''
    # need to parse_content() to eliminate duplicate heading
    head, level, page = parse_content()
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    for index in range(len(head)):
        file.write("&lt;h"+str(level[index])+"&gt;"+str(head[index])+"&lt;/h"+str(level[index])+"&gt;"+str(page[index]))
    file.close()
    '''
    raise cherrypy.HTTPRedirect("edit_page")
</t>
<t tx="2014fall.20140826101705.2666"># seperate save page
@cherrypy.expose
def ssavePage(self, page_content=None, page_order=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if page_content == None:
        return self.error_log("no content to save!")
    page_content = page_content.replace("\n","")
    head, level, page = parse_content()
    original_head_title = head[int(page_order)]
    file = open(data_dir+"content.htm", "w", encoding="utf-8")
    for index in range(len(head)):
        if index == int(page_order):
            file.write(page_content)
        else:
            file.write("&lt;h"+str(level[index])+"&gt;"+str(head[index])+"&lt;/h"+str(level[index])+"&gt;"+str(page[index]))
    file.close()

    # if head[int(page_order)] still existed and equal original_head_title, go back to origin edit status, otherwise go to "/"
    # here the content is modified, we need to parse the new page_content again
    head, level, page = parse_content()
    # for debug
    # print(original_head_title, head[int(page_order)])
    if original_head_title == head[int(page_order)]:
        #edit_url = "get_page?heading="+urllib.parse.quote_plus(head[int(page_order)])+"&amp;edit=1"
        edit_url = "get_page?heading="+urllib.parse.quote_plus(original_head_title)+"&amp;edit=1"
        raise cherrypy.HTTPRedirect(edit_url)
    else:
        raise cherrypy.HTTPRedirect("/")
</t>
<t tx="2014fall.20140826101705.2667">@cherrypy.expose
def save_program(self, filename=None, editor=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if overwrite == "1" or not os.path.isfile(data_dir+"/brython_programs/"+filename):
            # open file in wt will use Windows \r\n for new line
            # use replace method to remove extra lines for Windows environment
            with open(data_dir+"/brython_programs/"+filename, "wt", encoding="utf-8") as out_file:
                data = editor.replace("\r\n", "\n")
                out_file.write(data)
            return str(filename)+" saved!&lt;br /&gt;"
        else:  
            return str(filename)+" exists! editor content not saved yet!&lt;br /&gt;"

</t>
<t tx="2014fall.20140826101705.2668">@cherrypy.expose
def save_calcprogram(self, filename=None, sheet_content=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if overwrite == "1" or not os.path.isfile(data_dir+"/calc_programs/"+filename):
            # open file in wt will use Windows \r\n for new line
            # use replace method to remove extra lines for Windows environment
            with open(data_dir+"/calc_programs/"+filename, "wt", encoding="utf-8") as out_file:
                data = sheet_content.replace("\r\n", "\n")
                out_file.write(data)
            return str(filename)+" saved!&lt;br /&gt;"
        else:  
            return str(filename)+" exists! editor content not saved yet!&lt;br /&gt;"

 





</t>
<t tx="2014fall.20140826101705.2669">@cherrypy.expose
def delete_program(self, filename=None, editor=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:       
        if delete1 == "1" and delete2 == "1" and os.path.isfile(data_dir+"/brython_programs/"+filename):
            os.remove(data_dir+"/brython_programs/"+filename)
            return str(filename)+" deleted!&lt;br /&gt;"
        elif not os.path.isfile(data_dir+"/brython_programs/"+filename):
            return str(filename)+" does not exist!&lt;br /&gt;"
        else:
            return "can not delete "+str(filename)+"!"
            
</t>
<t tx="2014fall.20140826101705.2670">@cherrypy.expose
def delete_calcprogram(self, filename=None, sheet_content=None, overwrite=0, delete1=0, delete2=0):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:       
        if delete1 == "1" and delete2 == "1" and os.path.isfile(data_dir+"/calc_programs/"+filename):
            os.remove(data_dir+"/calc_programs/"+filename)
            return str(filename)+" deleted!&lt;br /&gt;"
        elif not os.path.isfile(data_dir+"/calc_programs/"+filename):
            return str(filename)+" does not exist!&lt;br /&gt;"
        else:
            return "can not delete "+str(filename)+"!"
            
</t>
<t tx="2014fall.20140826101705.2671">@cherrypy.expose
def fileuploadform(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;file upload&lt;/h1&gt;"+'''
\\-4.&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script&gt;
\\-4.$(document).ready(function(){
\\-4.$('.prova').axuploader({url:'fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
\\-4.finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
\\-4.enable:true,
\\-4.remotePath:function(){
\\-2.return 'downloads/';
\\-4.}
\\-4.});
\\-4.});
\\-4.&lt;/script&gt;
\\-4.&lt;div class="prova"&gt;&lt;/div&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
\\-4.&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
\\-4.'''
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="2014fall.20140826101705.2672">@cherrypy.expose
def fileaxupload(self, *args, **kwargs):
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    if self.isAdmin():
        filename = kwargs["ax-file-name"]
        flag = kwargs["start"]
        if flag == "0":
            file = open(download_root_dir+"downloads/"+filename, "wb")
        else:
            file = open(download_root_dir+"downloads/"+filename, "ab")
        file.write(cherrypy.request.body.read())
        file.close()
        return "files uploaded!"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="2014fall.20140826101705.2673">@cherrypy.expose
def flvplayer(self, filepath=None):
    outstring = '''
&lt;object type="application/x-shockwave-flash" data="/static/player_flv_multi.swf" width="320" height="240"&gt;
     &lt;param name="movie" value="player_flv_multi.swf" /&gt;
     &lt;param name="allowFullScreen" value="true" /&gt;
     &lt;param name="FlashVars" value="flv='''+filepath+'''&amp;amp;width=320&amp;amp;height=240&amp;amp;showstop=1&amp;amp;showvolume=1&amp;amp;showtime=1
     &amp;amp;startimage=/static/startimage_en.jpg&amp;amp;showfullscreen=1&amp;amp;bgcolor1=189ca8&amp;amp;bgcolor2=085c68
     &amp;amp;playercolor=085c68" /&gt;
&lt;/object&gt;
'''
    return outstring
</t>
<t tx="2014fall.20140826101705.2674">@cherrypy.expose
def imageuploadform(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;image upload&lt;/h1&gt;"+'''
\\-4.&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
\\-4.&lt;script&gt;
\\-4.$(document).ready(function(){
\\-4.$('.prova').axuploader({url:'imageaxupload', allowExt:['jpg','png','gif'],
\\-4.finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
\\-4.enable:true,
\\-4.remotePath:function(){
\\-2.return 'images/';
\\-4.}
\\-4.});
\\-4.});
\\-4.&lt;/script&gt;
\\-4.&lt;div class="prova"&gt;&lt;/div&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
\\-4.&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
\\-4.'''
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="2014fall.20140826101705.2675">@cherrypy.expose
def imageaxupload(self, *args, **kwargs):
    if self.isAdmin():
        filename = kwargs["ax-file-name"]
        flag = kwargs["start"]
        if flag == 0:
            file = open(download_root_dir+"images/"+filename, "wb")
        else:
            file = open(download_root_dir+"images/"+filename, "ab")
        file.write(cherrypy.request.body.read())
        file.close()
        return "image files uploaded!"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="2014fall.20140826101705.2676">@cherrypy.expose
def file_selector(self, type=None, page=1, item_per_page=10, keyword=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        if type == "downloads":
            #return downloads_file_selector()
            return file_lister("downloads", type, page, item_per_page)
        elif type == "image":
            #return images_file_selector()
            return file_lister("images", type, page, item_per_page)
</t>
<t tx="2014fall.20140826101705.2677">@cherrypy.expose
def download_list(self, item_per_page=5, page=1, keyword=None, *args, **kwargs):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(download_root_dir+"downloads/")
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += downloadlist_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += downloadlist_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2678">@cherrypy.expose
def image_list(self, item_per_page=5, page=1, keyword=None, *args, **kwargs):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(download_root_dir+"images/")
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='image_delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += imagelist_access_list(files, starti, endi)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += imagelist_access_list(files, starti, total_rows)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2679">@cherrypy.expose
def load_list(self, item_per_page=5, page=1, filedir=None, keyword=None, *args, **kwargs):
    '''
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    '''
    # cherrypy.session['admin'] = 1
    # cherrypy.session.get('admin')
    files = os.listdir(data_dir+filedir+"_programs/")
    if keyword == None:
        pass
    else:
        cherrypy.session['search_keyword'] = keyword
        files = [s for s in files if keyword in s]
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = '''&lt;script&gt;
function keywordSearch(){
    var oform = document.forms["searchform"];
    // 取elements集合中 name 屬性為 keyword 的值
    var getKeyword = oform.elements.keyword.value;
    // 改為若表單為空, 則列出全部資料
    //if(getKeyword != ""){
        window.location = "?brython&amp;keyword="+getKeyword;
    //}
}
&lt;/script&gt;
    &lt;form name="searchform"&gt;
    &lt;input type="text" id="keyword" /&gt;
    &lt;input type="button" id="send" value="查詢" onClick="keywordSearch()"/&gt; 
    &lt;/form&gt;
'''
    outstring += "&lt;form name='filelist' method='post' action=''&gt;"
    notlast = False
    if total_rows &gt; 0:
        # turn off the page selector on top
        '''
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "brython?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        '''
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += loadlist_access_list(files, starti, endi, filedir)+"&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += loadlist_access_list(files, starti, total_rows, filedir)+"&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 5
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "/"+filedir+"?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "/"+filedir+"?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(cherrypy.session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;"
    else:
        outstring += "no data!"
    #outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='load'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;/form&gt;"

    return outstring
</t>
<t tx="2014fall.20140826101705.2680">@cherrypy.expose
def delete_file(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if filename == None:
        outstring = "no file selected!"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename+"&lt;input type='hidden' name='filename' value='"+filename+"'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index]+"&lt;input type='hidden' name='filename' value='"+filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2681">@cherrypy.expose
def image_delete_file(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if filename == None:
        outstring = "no file selected!"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='image_doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename+"&lt;input type='hidden' name='filename' value='"+filename+"'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index]+"&lt;input type='hidden' name='filename' value='"+filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2682">@cherrypy.expose
def doDelete(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # delete files
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_root_dir+"downloads/"+filename)
            outstring += filename+" deleted!"
        except:
            outstring += filename+"Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_root_dir+"downloads/"+filename[index])
                outstring += filename[index]+" deleted!&lt;br /&gt;"
            except:
                outstring += filename[index]+"Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2683">@cherrypy.expose
def image_doDelete(self, filename=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    # delete files
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_root_dir+"images/"+filename)
            outstring += filename+" deleted!"
        except:
            outstring += filename+"Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_root_dir+"images/"+filename[index])
                outstring += filename[index]+" deleted!&lt;br /&gt;"
            except:
                outstring += filename[index]+"Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;"+outstring+"&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2684">@cherrypy.expose
def creo_getvolume(self, *args, **kwargs):
    return '''
\\-4.&lt;script src="/static/weblink/pfcUtils.js"&gt;
\\-4.&lt;/script&gt;&lt;script  src="/static/weblink/pfcParameterExamples.js"&gt;&lt;/script&gt;&lt;script  src="/static/weblink/pfcComponentFeatExamples.js"&gt;
\\-3.document.writeln ("Error loading script!");
\\-4.&lt;/script&gt;&lt;script language="JavaScript"&gt;
if (!pfcIsWindows())
    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
\\-2.var session = pfcGetProESession ();
\\-4.// for volume
\\-2.var solid = session.CurrentModel;
try
    {
        createParametersFromArguments ();
        solid.Regenerate(void null);   
        properties = solid.GetMassProperty(void null);
        alert("part volume:"+properties.Volume);
    }
catch (err)
    {
        alert ("Exception occurred: "+pfcGetExceptionType (err));
   }
\\-4.&lt;/script&gt;
\\-4.'''
</t>
<t tx="2014fall.20140826101705.2685">@cherrypy.expose
def anglebracket(self, *args, **kwargs):
    return '''
\\-4.&lt;script src="/static/weblink/pfcUtils.js"&gt;
\\-4.&lt;/script&gt;&lt;script src="/static/weblink/wl_header.js"&gt;
\\-4.document.writeln ("Error loading Pro/Web.Link header!");
\\-4.&lt;/script&gt;&lt;script language="JavaScript"&gt;
\\-4.if (!pfcIsWindows()) netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
\\-4.// if the third input is false, it means use session, but will not be displayed
\\-4.// ret is the model open return
\\-3.var ret = document.pwl.pwlMdlOpen("angle_bracket_creo.prt", "c:/tmp", false);
\\-4.if (!ret.Status) {
alert("pwlMdlOpen failed (" + ret.ErrorCode + ")");
\\-4.}
var session = pfcGetProESession();
var window = session.OpenFile(pfcCreate("pfcModelDescriptor").CreateFromFileName("angle_bracket_creo.prt"));
var solid = session.GetModel("angle_bracket_creo.prt",pfcCreate("pfcModelType").MDL_PART);
var d1,d2,myf,myn,i,j,volume,count,d1Value,d2Value;
d1 = solid.GetParam("len1");
//d2 = solid.GetParam("width");
//myf=20;
//myn=20;
volume=0;
count=0;
try
{
        //createParametersFromArguments ();
        for(i=0;i&lt;=3;i++)
        {
            //for(j=0;j&lt;=2;j++)
            //{
                myf=180+i;
                //myn=100+i*10;
     d1Value = pfcCreate ("MpfcModelItem").CreateDoubleParamValue(myf);
     d2Value = pfcCreate ("MpfcModelItem").CreateDoubleParamValue(myn);
                d1.Value = d1Value;
                //d2.Value = d2Value;
                solid.Regenerate(void null);
                properties = solid.GetMassProperty(void null);
                //volume = volume + properties.Volume;
\\-4.volume = properties.Volume;
                count = count + 1;
\\-4.alert("execute no: "+count+", part volume:"+volume);
\\-4.var newfile = document.pwl.pwlMdlSaveAs("angle_bracket_creo.prt", "c:/tmp", "cadp_w12_py_"+count+".prt");
\\-4.if (!newfile.Status) {
alert("pwlMdlSaveAs failed (" + newfile.ErrorCode + ")");
\\-4.//}
            }
        }
        //alert("totally execute:"+count+"times, part volume:"+volume);
        //alert("part volume:"+properties.Volume);
        //alert("part volume to integer:"+Math.round(properties.Volume));
    }
catch(err)
    {
        alert ("Exception occurred: "+pfcGetExceptionType (err));
    }
\\-4.&lt;/script&gt;
\\-4.'''
</t>
<t tx="2014fall.20140826101705.2686">@cherrypy.expose
def search_form(self):
    if self.isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search&lt;/h1&gt;&lt;form method='post' action='doSearch'&gt; \
    keywords:&lt;input type='text' name='keyword'&gt; \
    &lt;input type='submit' value='search'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        raise cherrypy.HTTPRedirect("login")
</t>
<t tx="2014fall.20140826101705.2687">@cherrypy.expose
def doSearch(self, keyword=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        match = ""
        for index in range(len(head)):
            if (keyword != "" or None) and (keyword.lower() in page[index].lower() or \
            keyword.lower() in head[index].lower()): \
                match += "&lt;a href='get_page?heading="+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;&lt;br /&gt;"
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search Result&lt;/h1&gt;keyword: "+ \
        keyword.lower()+"&lt;br /&gt;&lt;br /&gt;in the following pages:&lt;br /&gt;&lt;br /&gt;"+ \
        match+" \
     &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2688">def set_css(self):
    outstring = '''&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;CMSimply - Simple Cloud CMS in Python 3&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
'''+syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    if inOpenshift:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;'''+site_title+'''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="sitemap"&gt;Site Map&lt;/a&gt;&lt;/li&gt;
'''
    if self.isAdmin():
        outstring += '''
&lt;li&gt;&lt;a href="edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="'''+cherrypy.url(qs=cherrypy.request.query_string)+'''&amp;edit=1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="imageuploadform"&gt;image upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="fileuploadform"&gt;file upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="download_list"&gt;file list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="logout"&gt;logout&lt;/a&gt;&lt;/li&gt;
'''
    else:
        outstring += '''
&lt;li&gt;&lt;a href="login"&gt;login&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring
</t>
<t tx="2014fall.20140826101705.2689">@cherrypy.expose
def edit_config(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not self.isAdmin():
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
    Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        site_title, password = parse_config()
        # edit config file
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Edit Config&lt;/h1&gt;&lt;form method='post' action='saveConfig'&gt; \
    Site Title:&lt;input type='text' name='site_title' value='"+site_title+"' size='50'&gt;&lt;br /&gt; \
    Password:&lt;input type='text' name='password' value='"+password+"' size='50'&gt;&lt;br /&gt; \
 &lt;input type='hidden' name='password2' value='"+password+"'&gt; \
    &lt;input type='submit' value='send'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2690">@cherrypy.expose
def saveConfig(self, site_title=None, password=None, password2=None):
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
    if site_title == None or password == None:
        return self.error_log("no content to save!")
    old_site_title, old_password = parse_config()
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if site_title == None or password == None or password2 != old_password or password == '':
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Error!&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        if password == password2 and password == old_password:
            hashed_password = old_password
        else:
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        file = open(data_dir+"config", "w", encoding="utf-8")
        file.write("siteTitle:"+site_title+"\npassword:"+hashed_password)
        file.close()
        return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
        directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;config file saved&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2691"># use to check directory variable data
@cherrypy.expose
def listdir(self):
    return download_root_dir +","+data_dir
</t>
<t tx="2014fall.20140826101705.2692">@cherrypy.expose
def sitemap(self):
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    sitemap = render_menu(head, level, page, sitemap=1)

    return self.set_css()+"&lt;div class='container'&gt;&lt;nav&gt;"+ \
    directory+"&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Site Map&lt;/h1&gt;"+sitemap+"&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="2014fall.20140826101705.2693">@cherrypy.expose
def brython(self, item_per_page=5, page=1, keyword=None, filename=None, *args, **kwargs):
    part1 =  '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/console.css"&gt;
&lt;link rel="stylesheet" type="text/css" href="/static/brython.css"&gt;
&lt;script type="text/javascript" src="/static/Brython2.2.0rc0-20140913-093500/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://togetherjs.com/togetherjs-min.js"&gt;&lt;/script&gt;
&lt;script src="/static/ace/src-min-noconflict/ace.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/Cango2D.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/yen_fourbar.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/gearUtils-04.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/jsc3d.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/stlviewer.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/three.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Coordinates.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/dat.gui.min.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/Detector.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script src="/static/threejs/OrbitAndPanControls.js" type="text/javascript"&gt;
&lt;/script&gt;
&lt;script type="text/javascript" &gt;
function getradio(tagname){
var radios = document.getElementsByName(tagname);
for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
        // do whatever you want with the checked radio
        return radios[i].value;
        // only one radio can be logically checked, don't check the rest
        break;
      }
   }
}

function run_js(){
    var cons = document.getElementById("console")
    var jscode = cons.value
    var t0 = (new Date()).getTime()
    eval(jscode)
    var t1 = (new Date()).getTime()
    console.log("Javascript code run in "+(t1-t0)+" ms")
}
&lt;/script&gt;
&lt;script type="text/python3" src="/static/editor.py"&gt;&lt;/script&gt;

&lt;script type="text/python3"&gt;
from browser import doc

overwrite = 0
# add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
# delete1 and delete2 parameters are also added into save_program function.
delete1 = 0
delete2 = 0

def set_debug(ev):
    if ev.target.checked:
        __BRYTHON__.debug = 1
    else:
        __BRYTHON__.debug = 0
        
def set_overwrite(ev):
    global overwrite
    if ev.target.checked:
        overwrite = 1
    else:
        overwrite = 0

# add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
def set_delete1(ev):
    global delete1
    if ev.target.checked:
        delete1 = 1
    else:
        delete1 = 0

def set_delete2(ev):
    global delete2
    if ev.target.checked:
        delete2 = 1
    else:
        delete2 = 0

#### ajax process
from browser import ajax,doc

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        # show request text on id=result division
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('GET', url, True)
    req.send()

def post(url):
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.set_timeout(timeout, err_msg)
    req.open('POST', url, True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    # doc["filename"].value is the id=filename input field's value
    # editor.getValue() is the content on editor, need to send dictionary format data
    # while post url, need to save editor content into local_storage to use the previous load javascripts
    storage["py_src"] = editor.getValue()
    # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
    req.send({'filename':doc["filename"].value, 'editor':editor.getValue(), 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})
    
# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/brython_programs/'+doc["filename"].value
    try:
        editor.setValue(open(_name, encoding="utf-8").read())
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
def get_radio(ev):
    from javascript import JSObject
    filename = JSObject(getradio)("filename")
    # ajax can only read data from server
    doc["filename"].value = filename
    _name = '/brython_programs/'+filename
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["result"].html = filename+" loaded!"
    editor.scrollToRow(0)
    editor.gotoLine(0)
    reset_theme()
    
# bindings
doc['run_js'].bind('click',run_js)
doc['set_debug'].bind('change',set_debug)
'''
    adm1 = '''
doc['set_overwrite'].bind('change',set_overwrite)
# add delete_program 4/7, two associated binds added
doc['set_delete1'].bind('change',set_delete1)
doc['set_delete2'].bind('change',set_delete2)
'''
    part2 = '''
# next functions are defined in editor.py
doc['show_js'].bind('click',show_js)
doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
# get_prog and get _radio (working)
doc['get_prog'].bind('click', get_prog)
doc['get_radio'].bind('click', get_radio)
# reset_the_src and clear_console (working)
doc['reset_the_src'].bind('click',reset_the_src)
doc['clear_console'].bind('click',clear_console)
# clear_canvas and clear_src
doc['clear_canvas'].bind('click',clear_canvas)
doc['clear_src'].bind('click',clear_src)
# only admin can save program to server
'''
    adm2 = '''
doc['save_program'].bind('click',lambda ev:post('save_program'))
# add delete_program 5/7, delete_program button bind to execute delete_program on server.
doc['delete_program'].bind('click',lambda ev:post('delete_program'))
'''
    # if load program through url
    if filename != None:
        load_program = '''
_name = '/brython_programs/'''+filename+''''
try:
    editor.setValue(open(_name, encoding="utf-8").read())
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
editor.scrollToRow(0)
editor.gotoLine(0)
reset_theme()
'''
    else:
        load_program = ""

    part3 = '''
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;table id="banner" cellpadding=0 cellspacing=0&gt;
&lt;tr id="banner_row"&gt;
&lt;td style="width:80px"&gt;&lt;/td&gt;
&lt;td class="alnleft"&gt;
'''
    part4 = '''
&lt;/td&gt;
&lt;td class="alnleft"&gt;
            &lt;button id="reset_the_src"&gt;reset the_src&lt;/button&gt;
            &lt;button id="clear_src"&gt;clear src&lt;/button&gt;
            &lt;button id="clear_console"&gt;clear console&lt;/button&gt;
            &lt;button id="clear_canvas"&gt;clear canvas&lt;/button&gt;
            &lt;button onclick="TogetherJS(this); return false;"&gt;Start TogetherJS&lt;/button&gt;
            &lt;br /&gt;filename: &lt;input id="filename"&gt;
'''
    adm3 = '''
            &lt;button id="save_program"&gt;save program&lt;/button&gt;
            overwrite&lt;input type="checkbox" id="set_overwrite"&gt;
            &lt;br /&gt;&lt;!-- add delete_program button and two double checkboxs 6/7 --&gt;
            &lt;button id="delete_program"&gt;delete program&lt;/button&gt;
            sure to delete1&lt;input type="checkbox" id="set_delete1"&gt;
            sure to delete2&lt;input type="checkbox" id="set_delete2"&gt;
'''
    part5 = '''
            &lt;div id="result"&gt;(empty)&lt;/div&gt;
            &lt;button id="get_radio"&gt;load selected program&lt;/button&gt;
            &lt;button onClick="window.location.reload()"&gt;reload page&lt;/button&gt;
            &lt;button id="get_prog"&gt;get prog file&lt;/button&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!--
&lt;div style="text-align:center"&gt;
&lt;br&gt;Brython version: &lt;span id="version"&gt;&lt;/span&gt;
&lt;/div&gt;
--&gt;
&lt;div id="container"&gt;
    &lt;div id="left-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
    
      &lt;div style="float:center"&gt;
        &lt;button id="show_console"&gt;Console&lt;/button&gt;
        &lt;button id="show_js"&gt;Javascript&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div style="width:100%;height:100%;"&gt;
    &lt;textarea id="console"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id="right-div"&gt;
    &lt;div style="padding: 3px 3px 3px 3px;"&gt;
        &lt;div style="float:left"&gt;
        &lt;button id="run"&gt;run&lt;/button&gt;
        &lt;button id="run_js"&gt;run Javascript&lt;/button&gt;
        debug&lt;input type="checkbox" id="set_debug" checked&gt;
        &lt;/div&gt;
    Theme: &lt;select id="ace_theme"&gt;
    &lt;optgroup label="Bright"&gt;
    &lt;option value="ace/theme/chrome"&gt;Chrome&lt;/option&gt;
    &lt;option value="ace/theme/crimson_editor"&gt;Crimson Editor&lt;/option&gt;
    &lt;option value="ace/theme/eclipse"&gt;Eclipse&lt;/option&gt;
    &lt;option value="ace/theme/github"&gt;GitHub&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;optgroup label="Dark"&gt;
    &lt;option value="ace/theme/cobalt"&gt;Cobalt&lt;/option&gt;
    &lt;option value="ace/theme/idle_fingers"&gt;idleFingers&lt;/option&gt;
    &lt;option value="ace/theme/monokai"&gt;Monokai&lt;/option&gt;
    &lt;option value="ace/theme/pastel_on_dark"&gt;Pastel on dark&lt;/option&gt;
    &lt;option value="ace/theme/vibrant_ink"&gt;Vibrant Ink&lt;/option&gt;
    &lt;/optgroup&gt;
    &lt;/select&gt; 
    &lt;/div&gt;
      &lt;div id="editor"&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div style="float:left;margin-top:50px;"&gt;
&lt;canvas id="plotarea" width="800" height="600"&gt;&lt;/canvas&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    if not self.isAdmin():
        return part1+part2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+part5
    else:
        return part1+adm1+part2+adm2+load_program+part3+self.load_list(item_per_page, page, "brython", keyword)+part4+adm3+part5
</t>
<t tx="2014fall.20140826101705.2694">@cherrypy.expose
def ethercalc(self, filename=None, *args, **kwargs):
    part1 = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.2.0rc0-20140913-093500/brython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcconstants.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalc-3.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalctableeditor.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formatnumber2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formula1.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcpopup.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcspreadsheetcontrol.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcviewer.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;div id="tableeditor" style="margin:8px 0px 10px 0px;"&gt;editor goes here&lt;/div&gt;
&lt;/div&gt;
&lt;div id="msg" onclick="this.innerHTML='&amp;nbsp;';"&gt;&lt;/div&gt;

&lt;script id="ascript" type="text/python"&gt;
from browser import ajax, doc, alert, websocket
from javascript import JSConstructor

spreadsheet =  JSConstructor(SocialCalc.SpreadsheetControl)()
savestr = ""
spreadsheet.InitializeSpreadsheetControl("tableeditor")
spreadsheet.ExecuteCommand('redisplay', '')

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('GET',url,True)
    req.send()

def post(url):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('POST',url,True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    req.send({'filename':doc["filename"].value, 'sheet_content':sheet_content})

def show_save(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    print(sheet_content)
    
def doreload(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])

    #if (spreadsheet.editor.context.sheetobj.attribs.recalc=="off"):
        #spreadsheet.ExecuteCommand('redisplay', '')
    #else:
    spreadsheet.ExecuteCommand('recalc', '')
    alert("reload done")

# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/calc_programs/'+doc["filename"].value
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"

# for built-in websocket
def on_open(evt):
    doc['send_button'].disabled = False
    doc['closebtn'].disabled = False
    doc['openbtn'].disabled = True

def on_message(evt):
    # message reeived from server
    alert("Message received : %s" %evt.data)

def on_close(evt):
    # websocket is closed
    alert("Connection is closed")
    doc['openbtn'].disabled = False
    doc['closebtn'].disabled = True
    doc['send_button'].disabled = True

ws = None
def _open(evt):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    if not __BRYTHON__.has_websocket:
        alert("WebSocket is not supported by your browser")
        return
    global ws
    # open a web socket
    ws = websocket.websocket("wss://localhost:8000")
    # bind functions to web socket events
    ws.bind('open',on_open)
    ws.bind(sheet_content,on_message)
    ws.bind('close',on_close)

def send(evt):
    data = doc["data"].value
    if data:
        ws.send(data)

def close_connection(evt):
    ws.close()
    doc['openbtn'].disabled = False

# bindings
#doc['timeout'].bind('click',lambda ev:go('ajax.py'))
doc['save_program'].bind('click',lambda ev:post('save_calcprogram'))
doc['get_prog'].bind('click', get_prog)
doc['show_save'].bind('click', show_save)
doc['doreload'].bind('click', doreload)
doc['openbtn'].bind('click', _open)
'''
    # if load program through url
    if filename != None:
        load_program = '''
# ajax can only read data from server
_name = '/calc_programs/'''+filename+''''
try:
    sheet_content = open(_name, encoding="utf-8").read()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
    spreadsheet.ExecuteCommand('recalc', '')
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
'''
    else:
        load_program = ""

    part2 = '''
&lt;/script&gt;
&lt;button id="show_save"&gt;顯示內容&lt;/button&gt;
&lt;button id="doreload"&gt;do reload&lt;/button&gt;
&lt;button onClick=exec_command();&gt;exec command&lt;/button&gt;
&lt;button id="save_program";&gt;save program&lt;/button&gt;
filename: &lt;input id="filename"&gt;
&lt;button id="get_prog"&gt;get prog file&lt;/button&gt;&lt;br /&gt;
&lt;div id="result"&gt;(empty)&lt;/div&gt;&lt;br /&gt;
&lt;button id="openbtn"&gt;Open connection&lt;/button&gt; 
&lt;input id="data"&gt;
&lt;button id="send_button" disabled onclick="send()"&gt;Send&lt;/button&gt;
&lt;button id="closebtn" disabled onclick="close_connection()"&gt;Close connection&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
'''
    return part1+load_program+part2

</t>
<t tx="2014fall.20140826101705.2695">@cherrypy.expose
def calc(self, item_per_page=5, page=1, keyword=None, filename=None, *args, **kwargs):
    part1 = '''
&lt;!DOCTYPE html&gt; 
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;script type="text/javascript" src="/static/Brython2.2.0rc0-20140913-093500/brython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcconstants.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalc-3.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalctableeditor.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formatnumber2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/formula1.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcpopup.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcspreadsheetcontrol.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/socialcalc/socialcalcviewer.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
function getradio(tagname){
var radios = document.getElementsByName(tagname);
for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
        // do whatever you want with the checked radio
        return radios[i].value;
        // only one radio can be logically checked, don't check the rest
        break;
      }
   }
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython({debug:1, cache:'version'})"&gt;
&lt;div id="tableeditor" style="margin:8px 0px 10px 0px;"&gt;editor goes here&lt;/div&gt;
&lt;div id="msg" onclick="this.innerHTML='&amp;nbsp;';"&gt;&lt;/div&gt;

&lt;script id="ascript" type="text/python"&gt;
from browser import ajax, doc, alert, websocket
from javascript import JSConstructor

spreadsheet =  JSConstructor(SocialCalc.SpreadsheetControl)()
savestr = ""
spreadsheet.InitializeSpreadsheetControl("tableeditor")
spreadsheet.ExecuteCommand('redisplay', '')

overwrite = 0
# add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
# delete1 and delete2 parameters are also added into save_program function.
delete1 = 0
delete2 = 0

def set_overwrite(ev):
    global overwrite
    if ev.target.checked:
        overwrite = 1
    else:
        overwrite = 0

# add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
def set_delete1(ev):
    global delete1
    if ev.target.checked:
        delete1 = 1
    else:
        delete1 = 0

def set_delete2(ev):
    global delete2
    if ev.target.checked:
        delete2 = 1
    else:
        delete2 = 0

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('GET',url,True)
    req.send()

def post(url):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('POST',url,True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
    req.send({'filename':doc["filename"].value, 'sheet_content':sheet_content, 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})

def show_save(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    print(sheet_content)
    
def doreload(ev):
    global spreadsheet
    sheet_content = spreadsheet.CreateSpreadsheetSave()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])

    #if (spreadsheet.editor.context.sheetobj.attribs.recalc=="off"):
        #spreadsheet.ExecuteCommand('redisplay', '')
    #else:
    spreadsheet.ExecuteCommand('recalc', '')
    alert("reload done")

# get program from server
def get_prog(ev):
    # ajax can only read data from server
    _name = '/calc_programs/'+doc["filename"].value
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"

def get_radio(ev):
    from javascript import JSObject
    filename = JSObject(getradio)("filename")
    # ajax can only read data from server
    doc["filename"].value = filename
    _name = '/calc_programs/'+filename
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["result"].html = doc["filename"].value+" loaded!"
    except:
        doc["result"].html = "can not get "+doc["filename"].value+"!"

# bindings
doc['get_prog'].bind('click', get_prog)
doc['get_radio'].bind('click', get_radio)
doc['doreload'].bind('click', doreload)
'''
    adm1 = '''
doc['save_program'].bind('click',lambda ev:post('save_calcprogram'))
# add delete_program 5/7, delete_program button bind to execute delete_program on server.
doc['delete_program'].bind('click',lambda ev:post('delete_calcprogram'))
doc['show_save'].bind('click', show_save)
doc['set_overwrite'].bind('change',set_overwrite)
# add delete_program 4/7, two associated binds added
doc['set_delete1'].bind('change',set_delete1)
doc['set_delete2'].bind('change',set_delete2)
'''
    # if load program through url
    if filename != None:
        load_program = '''
# ajax can only read data from server
_name = '/calc_programs/'''+filename+''''
try:
    sheet_content = open(_name, encoding="utf-8").read()
    parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
    if (parts):
        if (parts.sheet):
            spreadsheet.sheet.ResetSheet()
            spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
        if (parts.edit):
            spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
    spreadsheet.ExecuteCommand('recalc', '')
    doc["filename"].value = "'''+filename+'''"
    doc["result"].html = "'''+filename+''' loaded!"
except:
    doc["result"].html = "can not get '''+filename+'''!"
'''
    else:
        load_program = ""

    part2 = '''
&lt;/script&gt;
filename: &lt;input id="filename"&gt;
&lt;button id="get_prog"&gt;get prog file&lt;/button&gt;&lt;br /&gt;
&lt;div id="result"&gt;(empty)&lt;/div&gt;&lt;br /&gt;
&lt;button id="doreload"&gt;do reload&lt;/button&gt;
&lt;button id="get_radio"&gt;load selected program&lt;/button&gt;&lt;br /&gt;
'''
    adm2 = '''
&lt;button id="show_save"&gt;顯示內容&lt;/button&gt;
&lt;button id="save_program";&gt;save program&lt;/button&gt;
overwrite&lt;input type="checkbox" id="set_overwrite"&gt;
&lt;br /&gt;&lt;!-- add delete_program button and two double checkboxs 6/7 --&gt;
&lt;button id="delete_program"&gt;delete program&lt;/button&gt;
sure to delete1&lt;input type="checkbox" id="set_delete1"&gt;
sure to delete2&lt;input type="checkbox" id="set_delete2"&gt;&lt;br /&gt;
'''
    part3 = '''
&lt;/body&gt;
&lt;/html&gt;
'''
    # only admin can view and edit calc, we still need to find a way to protect programs on calc_programs
    if not self.isAdmin():
        raise cherrypy.HTTPRedirect("login")
        # for not admin
        #return part1+load_program+part2+self.load_list(item_per_page, page, "calc")+part3
    else:
        # for admin
        return part1+adm1+load_program+part2+adm2+self.load_list(item_per_page, page, "calc")+part3

</t>
<t tx="2014fall.20140826101705.2696">@cherrypy.expose
def openjscad(self, *args, **kwargs):
    return '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"/&gt;
&lt;title&gt;OpenJSCAD.org&lt;/title&gt;
&lt;link rel="stylesheet" href="/jquery/themes/base/jquery-ui.css" /&gt;
&lt;script src="/jquery/jquery-1.9.1.js"&gt;&lt;/script&gt;
&lt;script src="/jquery/jquery-ui.js"&gt;&lt;/script&gt;
&lt;script src="/jquery/jquery.hammer.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="/style.css" type="text/css"&gt;
&lt;link rel="stylesheet" href="/openjscad.css" type="text/css"&gt;
&lt;/head&gt;
&lt;body onload="onload()"&gt;
&lt;style&gt;
/* we choose chrome theme for ace, and make sure line number is transparent too */
/* this has to stay in the body (not head) otherwise does not take effect */
.ace-chrome .ace_gutter { 
   border-left: 2px dashed rgba(200,200,200,0.2);
   background: none;
}
.ace-chrome {
   font-size: 10pt;     // -- not 'px', but 'pt' for high dpi screens
}
&lt;/style&gt;
&lt;script src="/lightgl.js"&gt;&lt;/script&gt;
&lt;script src="/csg.js"&gt;&lt;/script&gt;
&lt;script src="/openjscad.js"&gt;&lt;/script&gt;
&lt;script src="/openscad.js"&gt;&lt;/script&gt;
&lt;script src="/underscore.js"&gt;&lt;/script&gt;
&lt;script src="/openscad-openjscad-translator.js"&gt;&lt;/script&gt;
&lt;script lang=JavaScript&gt;
var version = '0.017 (2014/02/14)';
var me = document.location.toString().match(/^file:/)?'web-offline':'web-online'; // me: {cli, web-offline, web-online}
var browser = 'unknown';
if(navigator.userAgent.match(/(opera|chrome|safari|firefox|msie)/i))
   browser = RegExp.$1.toLowerCase();

$(document).ready(function() {
   $("#viewer").height($(window).height());

   $(window).resize(function() {                // adjust the relevant divs
      $("#viewer").width($(window).width());
      $("#viewer").height($(window).height());
   });


});   
&lt;/script&gt;
&lt;div id="editor"&gt;// -- OpenJSCAD.org logo
function main(params)
{
  // Main entry point; here we construct our solid: 
  var gear = involuteGear(
    params.numTeeth,
    params.circularPitch,
    params.pressureAngle,
    params.clearance,
    params.thickness
  );
  if(params.centerholeradius &gt; 0)
  {
    var centerhole = CSG.cylinder({start: [0,0,-params.thickness], end: [0,0,params.thickness], radius: params.centerholeradius, resolution: 16});
    gear = gear.subtract(centerhole);
  }
  return gear;
}

// Here we define the user editable parameters: 
function getParameterDefinitions() {
  return [
    { name: 'numTeeth', caption: 'Number of teeth:', type: 'int', default: 15 },
    { name: 'circularPitch', caption: 'Circular pitch:', type: 'float', default: 10 },
    { name: 'pressureAngle', caption: 'Pressure angle:', type: 'float', default: 20 },
    { name: 'clearance', caption: 'Clearance:', type: 'float', default: 0 },
    { name: 'thickness', caption: 'Thickness:', type: 'float', default: 5 },
    { name: 'centerholeradius', caption: 'Radius of center hole (0 for no hole):', type: 'float', default: 2 },
  ];
}

/*
  For gear terminology see: 
    http://www.astronomiainumbria.org/advanced_internet_files/meccanica/easyweb.easynet.co.uk/_chrish/geardata.htm
  Algorithm based on:
    http://www.cartertools.com/involute.html

  circularPitch: The distance between adjacent teeth measured at the pitch circle
*/ 
function involuteGear(numTeeth, circularPitch, pressureAngle, clearance, thickness)
{
  // default values:
  if(arguments.length &lt; 3) pressureAngle = 20;
  if(arguments.length &lt; 4) clearance = 0;
  if(arguments.length &lt; 4) thickness = 1;
  
  var addendum = circularPitch / Math.PI;
  var dedendum = addendum + clearance;
  
  // radiuses of the 4 circles:
  var pitchRadius = numTeeth * circularPitch / (2 * Math.PI);
  var baseRadius = pitchRadius * Math.cos(Math.PI * pressureAngle / 180);
  var outerRadius = pitchRadius + addendum;
  var rootRadius = pitchRadius - dedendum;

  var maxtanlength = Math.sqrt(outerRadius*outerRadius - baseRadius*baseRadius);
  var maxangle = maxtanlength / baseRadius;

  var tl_at_pitchcircle = Math.sqrt(pitchRadius*pitchRadius - baseRadius*baseRadius);
  var angle_at_pitchcircle = tl_at_pitchcircle / baseRadius;
  var diffangle = angle_at_pitchcircle - Math.atan(angle_at_pitchcircle);
  var angularToothWidthAtBase = Math.PI / numTeeth + 2*diffangle;

  // build a single 2d tooth in the 'points' array:
  var resolution = 5;
  var points = [new CSG.Vector2D(0,0)];
  for(var i = 0; i &lt;= resolution; i++)
  {
    // first side of the tooth:
    var angle = maxangle * i / resolution;
    var tanlength = angle * baseRadius;
    var radvector = CSG.Vector2D.fromAngle(angle);    
    var tanvector = radvector.normal();
    var p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[i+1] = p;
    
    // opposite side of the tooth:
    radvector = CSG.Vector2D.fromAngle(angularToothWidthAtBase - angle);    
    tanvector = radvector.normal().negated();
    p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[2 * resolution + 2 - i] = p;
  }

  // create the polygon and extrude into 3D:
  var tooth3d = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var allteeth = new CSG();
  for(var i = 0; i &lt; numTeeth; i++)
  {
    var angle = i*360/numTeeth;
    var rotatedtooth = tooth3d.rotateZ(angle);
    allteeth = allteeth.unionForNonIntersecting(rotatedtooth);
  }

  // build the root circle:  
  points = [];
  var toothAngle = 2 * Math.PI / numTeeth;
  var toothCenterAngle = 0.5 * angularToothWidthAtBase; 
  for(var i = 0; i &lt; numTeeth; i++)
  {
    var angle = toothCenterAngle + i * toothAngle;
    var p = CSG.Vector2D.fromAngle(angle).times(rootRadius);
    points.push(p);
  }

  // create the polygon and extrude into 3D:
  var rootcircle = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var result = rootcircle.union(allteeth);

  // center at origin:
  result = result.translate([0, 0, -thickness/2]);

  return result;
}
&lt;/div&gt;

&lt;div oncontextmenu="return false;" id="viewer"&gt;&lt;/div&gt; &lt;!-- avoiding popup when right mouse is clicked --&gt;

&lt;div id="parametersdiv"&gt;&lt;/div&gt;
&lt;div id="tail"&gt;
&lt;div id="statusdiv"&gt;&lt;/div&gt;
&lt;div id="errordiv"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!--&lt;script src="https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;--&gt;
&lt;script src="https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script&gt;
var gProcessor = null;
var editor = null;
var _includePath = "/";

function onload() {
   // -- http://ace.ajax.org/#nav=howto
   editor = ace.edit("editor");
   editor.setTheme("ace/theme/chrome");
   //document.getElementById('ace_gutter').style.background = 'none';
   editor.getSession().setMode("ace/mode/javascript");
   editor.getSession().on('change', function(e) {});               
   ['Shift-Return'].forEach(function(key) {
      editor.commands.addCommand({
         name: 'myCommand',
         bindKey: { win: key, mac: key },
         exec: function(editor) {
            var src = editor.getValue();
            if(src.match(/^\/\/\!OpenSCAD/i)) {
               editor.getSession().setMode("ace/mode/scad");
               src = openscadOpenJscadParser.parse(src);
            } else {
               editor.getSession().setMode("ace/mode/javascript");
            }
            gMemFs = [];
            gProcessor.setJsCad(src);
         },
      });
   });
   
   gProcessor = new OpenJsCad.Processor(document.getElementById("viewer"));

   //gProcessor.setDebugging(debugging); 
   if(me=='web-online') {    // we are online, fetch first example
      gProcessor.setJsCad(editor.getValue());
   }
}

// Show all exceptions to the user:
OpenJsCad.AlertUserOfUncaughtExceptions();
&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt; 
'''
</t>
<t tx="2014fall.20140826101705.2697">@cherrypy.expose
def ucrobot(self):
    return '''
&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
        &lt;/head&gt;
	&lt;body style="overflow:auto; margin:0; padding:0;position:relative"&gt;
		&lt;div id="container" onclick="this.focus();"&gt;&lt;/div&gt;
		&lt;div id="grading"&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="/static/threejs/Detector.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript"&gt;
		if ( ! Detector.webgl ) { 
				Detector.addGetWebGLMessage();
		}
		&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/three.min.js"&gt;&lt;/script&gt;
          &lt;script type="text/javascript" src="/static/threejs/Coordinates.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/OrbitAndPanControls.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/dat.gui.min.js"&gt;&lt;/script&gt;
		&lt;script type="text/javascript" src="/static/threejs/demo.js"&gt;&lt;/script&gt;

&lt;/body&gt;&lt;/html&gt;
'''
</t>
<t tx="2014fall.20140826101705.2698">class Download:
    @others
</t>
<t tx="2014fall.20140826101705.2699">@cherrypy.expose
def index(self, filepath):
    return serve_file(filepath, "application/x-download", "attachment")
</t>
<t tx="2014fall.20140826101705.4466">配置到 http://2014fall-2013fall.rhcloud.com/

步驟:

建立 github 程式碼專案

利用 github 程式碼網址, 新增 Python 3.3 OpenShift 應用程式

在應用程式下新增 MySQL 5.5 Cartridge

在近端專案新增 OpenShift 部署訊息後, 同步推向 github 與 OpenShift

將 OpenShift 網址, 以別名替代後, 才能顯示 Adsense 廣告</t>
<t tx="2014fall.20140826101705.4467">Brython 近端 import random 會有問題

遠端則沒有問題</t>
<t tx="2014pythonE.20140422152422.1669">配合 2014cda 專案

2014cdaproject@gmail.com

正好可以有三個  Python 3.3 應用程式, 用於 

2014cda, 2014cdb, 2014c2 等三個專案使用</t>
<t tx="2014pythonE.20140422152422.1670">puttygen.exe 導入 private key 後, 以 Conversions-&gt;Export OpenSSH key

將資料存入 V:\home\.ssh\id_rsa 檔案中

當使用者利用  git clone OpenShift 平台上專案時, Git 將會利用 id_rsa 私鑰與 OpenShift settings 設定所儲存的 public key 進行配對, 若通過驗證才能更新或擷取 OpenShift 平台上的程式碼.</t>
<t tx="2014pythonE.20140422152422.1671">course-mde-tw on Github 使用 coursemdetw@gmail.com 登記

couorsemdetw on Github 使用 course@mde.tw 登記

2014cda, 2014cdb, 2014c2 Github 專案登記在 coursemdetw 名下

course-mde-tw 為協同人員

</t>
<t tx="2014pythonE.20140424070658.1679"></t>
<t tx="2014spring.20140723175454.2635">是的, 我們想要開發一個雲端群組軟體套件, 名稱為 pygroup

這個版本內定使用 SQLite 資料庫

基本功能:

1. 讓 gmail 帳號可以登入本系統, 主要目的在讓學員可以自行管理 gmail 帳號密碼.

2. 本系統有一總管理員及 CMSimply 內容管理系統, 主要功能在審查學員是否可以登入本系統, 修改相關資料, 系統功能與導引則透過內容管理系統維護

3. 學員允許登入後, 可維護個人網頁, 可在被允許的模組下工作（依據被編入的分組(選課班級))

4. 各課程按照學員座號, 可以進入學員首頁, 並且查詢學員所增加的相關資料

5. 系統只接受文字與連結資料, 其他圖片, 影音, 文件檔案, 一律各自存放在 copy.com 與 Vimeo.</t>
<t tx="2014spring.20140803093407.1974"></t>
<t tx="2014spring.20140803093407.1975"></t>
<t tx="2014spring.20140803093407.1976"></t>
<t tx="2015.20140824143250.2077">tasklist 直接當成 index

配置管理者登入模式

pygroup_config

設定是否放置 Adsense 廣告與內容
設定是否允許 anonymous 新增或瀏覽內容
新增最上方使用者 menu bar 設計

線上管理各設定內容</t>
<t tx="2015.20140824143250.2078">def parse_config(self, filename):
    #filename = "pygroup_config"
    if not os.path.isfile(data_dir+filename):
        # create config file if there is no config file
        file = open(data_dir+filename, "w", encoding="utf-8")
        # 若無設定檔案, 則逐一寫入 default 值
        # default password is admin
        password="admin"
        hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        # adsense 為 yes 表示要放廣告, 內建 adsense 為 no
        # anonymouse 為 yes 表示允許無登入者可以檢視內容, 內建 anonymous 為 no
        file.write("password:"+hashed_password+"\n \
            adsense:no\n \
            anonymous:no\n \
            user_mail_suffix:\n \
            site_closed:no\n \
            read_only:no\n")
        file.close()
    # 取出設定值後, 傳回
    with open(data_dir+filename, encoding="utf-8") as file:
        config = file.read()
    config_data = config.split("\n")
    password = config_data[0].split(":")[1]
    adsense = config_data[1].split(":")[1]
    anonymous = config_data[2].split(":")[1]
    mail_suffix = config_data[3].split(":")[1]
    site_closed = config_data[4].split(":")[1]
    read_only = config_data[5].split(":")[1]
    return password, adsense, anonymous, mail_suffix, site_closed, read_only
</t>
<t tx="2015.20140824143250.2080">def allow_pass(self, user="anonymous"):
    password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    if user == "anonymous" and anonymous != "yes":
        return "no"
    else:
        return "yes"
</t>
<t tx="2015.20140825203447.2080">@cherrypy.expose
def editconfigform(self, *args, **kwargs):
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 以下設法列出 config 編輯表單
    # 取出目前的設定值
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("editconfigform.html")
    return mytemplate.render(user=user, saved_password=saved_password, adsense=adsense, anonymous=anonymous, mail_suffix=mail_suffix, site_closed=site_closed, read_only=read_only)
</t>
<t tx="2015.20140825203447.2081">@cherrypy.expose
def editconfig(self, password=None, password2=None, adsense=None, anonymous=None, \
                mail_suffix=None, site_closed=None, read_only=None):
    filename = "pygroup_config"
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    if password == None or adsense == None or anonymous == None:
        return self.error_log("no content to save!")
    # 取出目前的設定值
    old_password, old_adsense, old_anonymous, old_mail_suffix, old_site_closed, old_read_only = self.parse_config(filename=filename)
    if adsense == None or password == None or password2 != old_password or password == '':
        # 傳回錯誤畫面
        return "error&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
    else:
        if password == password2 and password == old_password:
            hashed_password = old_password
        else:
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        # 將新的設定值寫入檔案
        file = open(data_dir+filename, "w", encoding="utf-8")
        #  將新的設定值逐一寫入設定檔案中
        file.write("password:"+hashed_password+"\n \
            adsense:"+adsense+"\n \
            anonymous:"+anonymous+"\n \
            mail_suffix:"+mail_suffix+"\n \
            site_closed:"+site_closed+"\n \
            read_only:"+read_only+"\n")
        file.close()
        # 傳回設定檔案已經儲存
        return "config file saved&lt;br /&gt;&lt;a href='/'&gt;Go to main page&lt;/a&gt;&lt;br /&gt;"
</t>
<t tx="2015.20140826084958.2084">@cherrypy.expose
def editadsenseform(self, *args, **kwargs):
    user = self.printuser()
    # 只有系統管理者可以編輯 adsense_content 檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 以下設法列出 adsense_content 編輯表單
    # 取出目前的設定值
    filename="adsense_content"
    # 取出 adsense_content 後, 傳回
    with open(data_dir+filename, encoding="utf-8") as file:
        saved_adsense = file.read()
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("editadsenseform.html")
    return mytemplate.render(user=user, saved_adsense=saved_adsense)
</t>
<t tx="2015.20140826084958.2086">@cherrypy.expose
def editadsense(self, adsense_content=None):
    filename = "adsense_content"
    user = self.printuser()
    # 只有系統管理者可以編輯 config 設定檔案
    if user != "admin":
        raise cherrypy.HTTPRedirect("login")
    # 將新的設定值寫入檔案
    file = open(data_dir+filename, "w", encoding="utf-8")
    #  將新的設定值逐一寫入設定檔案中
    file.write(adsense_content+"\n")
    file.close()
    # 傳回設定檔案已經儲存
    return "adsense_content file saved"
</t>
<t tx="2015.20140826151106.2090">password:encrypted password
adsense:no/yes
anonymous:no/yes
user_mail_suffix:gm.nfu.edu.tw (功能尚未置入)
site_closed:no/yes

admin 管理者密碼
adsense 廣告是否要刊登
anonymous 用戶是否可以進入

增加可以登入的 Gmail 帳號尾碼
增加是否關閉網站設定功能

增加管理者可以 edit/delete 任何資料</t>
<t tx="2015.20140828002231.2093">同步到 2014fall-2013fall</t>
<t tx="2015.20140829105017.2095">增加一個 readonly 設定選項

管理者密碼: 
adsense: yes/no
anonymous: yse/no
mail_suffix:
site_closed: yes/no
read_only: yes/no</t>
<t tx="2015.20140829105017.2096">@cherrypy.expose
# 登入表單, 使用 gmail 帳號與密碼登入
def login(self, id=0, *args, **kwargs):
    # 當使用者要求登入時, 將 user session 清除
    #cherrypy.session["user"] = ""
    saved_password, adsense, anonymous, mail_suffix, site_closed, read_only = self.parse_config(filename="pygroup_config")
    
    template_lookup = TemplateLookup(directories=[template_root_dir+"/templates"])
    mytemplate = template_lookup.get_template("login.html")
    return mytemplate.render(site_closed=site_closed, read_only=read_only, id=id)</t>
<t tx="2015.20140830081045.4015">## Remove xml style tags from an input string.
#
#  @param string The input string.
#  @param allowed_tags A string to specify tags which should not be removed.
def strip_tags(self, string, allowed_tags=''):
  if allowed_tags != '':
    # Get a list of all allowed tag names.
    allowed_tags_list = re.sub(r'[\\/&lt;&gt; ]+', '', allowed_tags).split(',')
    allowed_pattern = ''
    for s in allowed_tags_list:
      if s == '':
       continue;
      # Add all possible patterns for this tag to the regex.
      if allowed_pattern != '':
        allowed_pattern += '|'
      allowed_pattern += '&lt;' + s + ' [^&gt;&lt;]*&gt;$|&lt;' + s + '&gt;|&lt;!--' + s + '--&gt;'
    # Get all tags included in the string.
    all_tags = re.findall(r'&lt;!--?[^--&gt;&lt;]+&gt;', string, re.I)
    for tag in all_tags:
      # If not allowed, replace it.
      if not re.match(allowed_pattern, tag, re.I):
        string = string.replace(tag, '')
  else:
    # If no allowed tags, remove all.
    string = re.sub(r'&lt;[^&gt;]*?&gt;', '', string)
 
  return string
</t>
<t tx="2015.20140901003454.2095">若登入有用戶想要連結的 ip, 則登入後直接轉到該 ip 對應資料</t>
<t tx="2015.20140902161836.3788">#coding: utf-8



@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
if __name__ == '__main__':
    '''
    # 指定程式執行的連接埠號, 內定為 8080
    cherrypy.server.socket_port = 8083
    # 指定程式執行所對應的伺服器 IP 位址, 內定為 127.0.0.1
    cherrypy.server.socket_host = '127.0.0.1'
    '''
    #cherrypy.quickstart(MyCheck())
    # modified for OpenShift
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        application = cherrypy.Application(MyCheck())
    else:
        cherrypy.quickstart(MyCheck())
</t>
<t tx="2015.20140902161836.3789">import os
import sys
import cherrypy
import sqlite3

# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    sys.path.append(os.path.join(os.getenv("OPENSHIFT_REPO_DIR"), "wsgi"))
else:
    sys.path.append(_curdir)

# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
</t>
<t tx="2015.20140902161836.3790">class MyCheck(object):
    _cp_config = {
        'tools.sessions.on': True
    }

    @others
    index.exposed = True
</t>
<t tx="2015.20140902161836.3791">def nl2br(self, string, is_xhtml= True ):
    if is_xhtml:
        return string.replace('\n','&lt;br /&gt;\n')
    else :
        return string.replace('\n','&lt;br&gt;\n')
</t>
<t tx="2015.20140902161836.3792">def printcwd(self):
    return cwd
</t>
<t tx="2015.20140902161836.3793">printcwd.exposed = True

def doCheck(self, word=None):
    if word == None:
        return "&lt;br /&gt;&lt;a href=\"/\"&gt;首頁&lt;/a&gt;|&lt;a href=\"./\"&gt;重新查詢&lt;/a&gt;"
    # 聯結資料庫檔案
    conn = sqlite3.connect(data_dir+"/wordnet30.db")
    # 取得目前 cursor
    cursor = conn.cursor()

    sql = "SELECT word.wordid, synset.synsetid, pos, definition, sample \
    FROM word, sense, synset, sample \
    WHERE word.wordid = sense.wordid \
    AND sense.synsetid = synset.synsetid \
    AND sample.synsetid = synset.synsetid \
    AND lemma = ?"

    output = "以下為 wordnet 字典查詢:"+word+" 所得到的結果&lt;br /&gt;&lt;br /&gt;"
    count = 0

    for row in cursor.execute(sql, [(word)]):
        count += 1
        output += str(count) + ": " + word.title() + " ("+ str(row[2])+")&lt;br /&gt;Defn: " + str(self.nl2br(row[3],True)) + "&lt;br /&gt;Sample: "  \
        +  str(self.nl2br(row[4],True)) + "&lt;br /&gt;&lt;br /&gt;"

    output += "&lt;br /&gt;&lt;a href=\"/\"&gt;首頁&lt;/a&gt;|&lt;a href=\"./\"&gt;重新查詢&lt;/a&gt;"

    return output
</t>
<t tx="2015.20140902161836.3794">doCheck.exposed = True

def index(self):
    return '''&lt;html&gt;
\\-4.&lt;head&gt;
\\-2.&lt;title&gt;查字典&lt;/title&gt;
\\-4.&lt;/head&gt;
\\-4.&lt;body&gt;
\\-2.&lt;form action="doCheck" method="post"&gt;
請輸入要查詢 wordnet 的單字:&lt;input type="text" name="word" value="" 
    size="15" maxlength="40"/&gt;
&lt;p&gt;&lt;input type="submit" value="查詢"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="reset" value="清除"/&gt;&lt;/p&gt;
\\-2.&lt;/form&gt;
\\-3.&lt;br /&gt;&lt;a href="/"&gt;首頁&lt;/a&gt;
\\-4.&lt;/body&gt;
\\-4.&lt;/html&gt;'''	
</t>
<t tx="2015.20140902161836.3801">#coding: utf-8



@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
if __name__ == '__main__':
    '''
    # 指定程式執行的連接埠號, 內定為 8080
    cherrypy.server.socket_port = 8083
    # 指定程式執行所對應的伺服器 IP 位址, 內定為 127.0.0.1
    cherrypy.server.socket_host = '127.0.0.1'
    '''
    #cherrypy.quickstart(MyCheck())
    # modified for OpenShift
    if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
        application = cherrypy.Application(MyCheck())
    else:
        cherrypy.quickstart(MyCheck())
</t>
<t tx="2015.20140902161836.3802">import os
import sys
import cherrypy
# 導入 pybean 模組與所要使用的 Store 及 SQLiteWriter 方法
from pybean import Store, SQLiteWriter
# 利用 Store  建立資料庫檔案對應物件, 並且設定 frozen=False 表示要開放動態資料表的建立

# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    sys.path.append(os.path.join(os.getenv("OPENSHIFT_REPO_DIR"), "wsgi"))
else:
    sys.path.append(_curdir)

# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
</t>
<t tx="2015.20140902161836.3803">class MyCheck(object):
    _cp_config = {
        'tools.sessions.on': True
    }

    @others
    index.exposed = True
</t>
<t tx="2015.20140902161836.3804">def nl2br(self, string, is_xhtml= True ):
    if is_xhtml:
        return string.replace('\n','&lt;br /&gt;\n')
    else :
        return string.replace('\n','&lt;br&gt;\n')
</t>
<t tx="2015.20140902161836.3805">def doCheck(self, word=None):
    if word == None:
        return "&lt;br /&gt;&lt;a href=\"/\"&gt;首頁&lt;/a&gt;|&lt;a href=\"./\"&gt;重新查詢&lt;/a&gt;"
    #vocabulary = Store(SQLiteWriter(os.environ['OPENSHIFT_REPO_DIR']+"/wsgi/webster_vocabulary.sqlite", frozen=True))
    vocabulary = Store(SQLiteWriter(data_dir+"/webster_vocabulary.sqlite", frozen=True))
    if (vocabulary.count("word","lower(word) like ?", [word]) == 0):
        return "找不到與 "+ word.title() + "有關的資料!"
    else:
        result = vocabulary.find("word","lower(word) like ?", [word])
        output = "以下為 webster 字典查詢:"+word+" 所得到的結果&lt;br /&gt;&lt;br /&gt;"
        for item in result:
            output += word.title()+"&lt;br /&gt;&lt;br /&gt;"+str(self.nl2br(item.defn,True))+"&lt;br /&gt;"
        output += "&lt;br /&gt;&lt;a href=\"/\"&gt;首頁&lt;/a&gt;|&lt;a href=\"./\"&gt;重新查詢&lt;/a&gt;"
        return output
</t>
<t tx="2015.20140902161836.3806">doCheck.exposed = True

def index(self):
    return '''&lt;html&gt;
&lt;head&gt;
&lt;title&gt;查字典&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="doCheck" method="post"&gt;
請輸入要查詢 webster 的單字:&lt;input type="text" name="word" value="" 
    size="15" maxlength="40"/&gt;
&lt;p&gt;&lt;input type="submit" value="查詢"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="reset" value="清除"/&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;br /&gt;&lt;a href="/"&gt;首頁&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;'''	
</t>
<t tx="2015.20140902161836.3840">#coding: utf-8


@language python
@tabwidth -4

&lt;&lt;declarations&gt;&gt;
@others
</t>
<t tx="2015.20140902161836.3841">import sqlite3
from pkg_resources import parse_version

__version__ = "0.2.1"
__author__ = "Mickael Desfrenes"
__email__ = "desfrenes@gmail.com"
</t>
<t tx="2015.20140902161836.3842"># Yen 2013.04.08, 將 Python2 的 .next() 改為 next(), 以便在 Python 3 中使用

class SQLiteWriter(object):

    """
    In frozen mode (the default), the writer will not alter db schema.
    Just add frozen=False to enable column creation (or just add False
    as second parameter):

    query_writer = SQLiteWriter(":memory:", False)
    """
    @others
</t>
<t tx="2015.20140902161836.3843">def __init__(self, db_path=":memory:", frozen=True):
    self.db = sqlite3.connect(db_path)
    self.db.isolation_level = None
    self.db.row_factory = sqlite3.Row
    self.frozen = frozen
    self.cursor = self.db.cursor()
    self.cursor.execute("PRAGMA foreign_keys=ON;")
    self.cursor.execute('PRAGMA encoding = "UTF-8";')
    self.cursor.execute('BEGIN;')
</t>
<t tx="2015.20140902161836.3844">def __del__(self):
    self.db.close()
</t>
<t tx="2015.20140902161836.3845">def replace(self, bean):
    keys = []
    values = []
    write_operation = "replace"
    if "id" not in bean.__dict__:
        write_operation = "insert"
        keys.append("id")
        values.append(None)
    self.__create_table(bean.__class__.__name__)
    columns = self.__get_columns(bean.__class__.__name__)
    for key in bean.__dict__:
        keys.append(key)
        if key not in columns:
            self.__create_column(bean.__class__.__name__, key,
                    type(bean.__dict__[key]))
        values.append(bean.__dict__[key])
    sql  = write_operation + " into " + bean.__class__.__name__ + "("
    sql += ",".join(keys) + ") values (" 
    sql += ",".join(["?" for i in keys])  +  ")"
    self.cursor.execute(sql, values)
    if write_operation == "insert":
        bean.id = self.cursor.lastrowid
    return bean.id
</t>
<t tx="2015.20140902161836.3846">def __create_column(self, table, column, sqltype):
    if self.frozen:
        return
    if sqltype in [float, int, bool]:
        sqltype = "NUMERIC"
    else:
        sqltype = "TEXT"
    sql = "alter table " + table + " add " + column + " " + sqltype    
    self.cursor.execute(sql)
</t>
<t tx="2015.20140902161836.3847">def __get_columns(self, table):
    columns = []
    if self.frozen:
        return columns
    self.cursor.execute("PRAGMA table_info(" + table  + ")")
    for row in self.cursor:
        columns.append(row["name"])
    return columns
</t>
<t tx="2015.20140902161836.3848">def __create_table(self, table):
    if self.frozen:
        return
    sql = "create table if not exists " + table + "(id INTEGER PRIMARY KEY AUTOINCREMENT)"
    self.cursor.execute(sql)
</t>
<t tx="2015.20140902161836.3849">def get_rows(self, table_name, sql = "1", replace = None):
    if replace is None : replace = []
    self.__create_table(table_name)
    sql = "SELECT * FROM " + table_name + " WHERE " + sql
    try:
        self.cursor.execute(sql, replace)
        for row in self.cursor:
            yield row
    except sqlite3.OperationalError:
        return
</t>
<t tx="2015.20140902161836.3850">def get_count(self, table_name, sql="1", replace = None):
    if replace is None : replace = []
    self.__create_table(table_name)
    sql = "SELECT count(*) AS cnt FROM " + table_name + " WHERE " + sql
    try:
        self.cursor.execute(sql, replace)
    except sqlite3.OperationalError:
        return 0
    for row in self.cursor:
        return row["cnt"]
</t>
<t tx="2015.20140902161836.3851">def delete(self, bean):
    self.__create_table(bean.__class__.__name__)
    sql = "delete from " + bean.__class__.__name__ + " where id=?"
    self.cursor.execute(sql,[bean.id])
</t>
<t tx="2015.20140902161836.3852">def link(self, bean_a, bean_b):
    self.replace(bean_a)
    self.replace(bean_b)
    table_a = bean_a.__class__.__name__
    table_b = bean_b.__class__.__name__
    assoc_table = self.__create_assoc_table(table_a, table_b)
    sql = "replace into " + assoc_table + "(" + table_a + "_id," + table_b
    sql += "_id) values(?,?)"
    self.cursor.execute(sql,
            [bean_a.id, bean_b.id])
</t>
<t tx="2015.20140902161836.3853">def unlink(self, bean_a, bean_b):
    table_a = bean_a.__class__.__name__
    table_b = bean_b.__class__.__name__
    assoc_table = self.__create_assoc_table(table_a, table_b)
    sql = "delete from " + assoc_table + " where " + table_a
    sql += "_id=? and " + table_b + "_id=?"
    self.cursor.execute(sql,
            [bean_a.id, bean_b.id])
</t>
<t tx="2015.20140902161836.3854">def get_linked_rows(self, bean, table_name):
    bean_table = bean.__class__.__name__
    assoc_table = self.__create_assoc_table(bean_table, table_name)
    sql = "select t.* from " + table_name + " t inner join " + assoc_table 
    sql += " a on a." + table_name + "_id = t.id where a."
    sql += bean_table + "_id=?"
    self.cursor.execute(sql,[bean.id])
    for row in self.cursor:
        yield row
</t>
<t tx="2015.20140902161836.3855">def __create_assoc_table(self, table_a, table_b):
    assoc_table = "_".join(sorted([table_a, table_b]))
    if not self.frozen:
        sql = "create table if not exists " + assoc_table + "("
        sql+= table_a + "_id NOT NULL REFERENCES " + table_a + "(id) ON DELETE cascade,"
        sql+= table_b + "_id NOT NULL REFERENCES " + table_b + "(id) ON DELETE cascade,"
        sql+= " PRIMARY KEY (" + table_a + "_id," + table_b + "_id));"
        self.cursor.execute(sql)
        # no real support for foreign keys until sqlite3 v3.6.19
        # so here's the hack
        if cmp(parse_version(sqlite3.sqlite_version),parse_version("3.6.19")) &lt; 0:
            sql = "create trigger if not exists fk_" + table_a + "_" + assoc_table
            sql+= " before delete on " + table_a
            sql+= " for each row begin delete from " + assoc_table + " where " + table_a + "_id = OLD.id;end;"
            self.cursor.execute(sql)
            sql = "create trigger if not exists fk_" + table_b + "_" + assoc_table
            sql+= " before delete on " + table_b
            sql+= " for each row begin delete from " + assoc_table + " where " + table_b + "_id = OLD.id;end;"
            self.cursor.execute(sql)
    return assoc_table
</t>
<t tx="2015.20140902161836.3856">def delete_all(self, table_name, sql = "1", replace = None):
    if replace is None : replace = []
    self.__create_table(table_name)
    sql = "DELETE FROM " + table_name + " WHERE " + sql
    try:
        self.cursor.execute(sql, replace)
        return True
    except sqlite3.OperationalError:
        return False
</t>
<t tx="2015.20140902161836.3857">def commit(self):
    self.db.commit()
</t>
<t tx="2015.20140902161836.3858">class Store(object):
    """
    A SQL writer should be passed to the constructor:

    beans_save = Store(SQLiteWriter(":memory"), frozen=False)
    """
    @others
</t>
<t tx="2015.20140902161836.3859">def __init__(self, SQLWriter):
    self.writer = SQLWriter 
</t>
<t tx="2015.20140902161836.3860">def new(self, table_name):
    new_object = type(table_name,(object,),{})()
    return new_object
</t>
<t tx="2015.20140902161836.3861">def save(self, bean):
    self.writer.replace(bean)
</t>
<t tx="2015.20140902161836.3862">def load(self, table_name, id):
    for row in self.writer.get_rows(table_name, "id=?", [id]):
        return self.row_to_object(table_name, row)
</t>
<t tx="2015.20140902161836.3863">def count(self, table_name, sql = "1", replace=None):
    return self.writer.get_count(table_name, sql, replace if replace is not None else [])
</t>
<t tx="2015.20140902161836.3864">def find(self, table_name, sql = "1", replace=None):
    for row in self.writer.get_rows(table_name, sql, replace if replace is not None else []):
        yield self.row_to_object(table_name, row)
</t>
<t tx="2015.20140902161836.3865">def find_one(self, table_name, sql = "1", replace=None):
    try:
        return next(self.find(table_name, sql, replace))
    except StopIteration:
        return None
</t>
<t tx="2015.20140902161836.3866">def delete(self, bean):
    self.writer.delete(bean)
</t>
<t tx="2015.20140902161836.3867">def link(self, bean_a, bean_b):
    self.writer.link(bean_a, bean_b)
</t>
<t tx="2015.20140902161836.3868">def unlink(self, bean_a, bean_b):
    self.writer.unlink(bean_a, bean_b)
</t>
<t tx="2015.20140902161836.3869">def get_linked(self, bean, table_name):
    for row in self.writer.get_linked_rows(bean, table_name):
        yield self.row_to_object(table_name, row)
</t>
<t tx="2015.20140902161836.3870">def delete_all(self, table_name, sql = "1", replace=None):
    return self.writer.delete_all(table_name, sql, replace if replace is not None else [])
</t>
<t tx="2015.20140902161836.3871">def row_to_object(self, table_name, row):
    new_object = type(table_name,(object,),{})()
    for key in row.keys():
        new_object.__dict__[key] = row[key]
    return new_object
</t>
<t tx="2015.20140902161836.3872">def commit(self):
    self.writer.commit()
</t>
<t tx="2015.20140902161836.5388">原先考慮要利用 shutil 複製檔案用

import os
import shutil
sourcePath = r'D:\some\path'
destPath = r'D:\some\other\path'
for root, dirs, files in os.walk(sourcePath):

    #figure out where we're going
    dest = destPath + root.replace(sourcePath, '')
    
    #if we're in a directory that doesn't exist in the destination folder
    #then create a new folder
    if not os.path.isdir(dest):
        os.mkdir(dest)
        print('Directory created at: ' + dest)

    #loop through all files in the directory
    for f in files:

        #compute current (old) &amp; new file locations
        oldLoc = root + '\\' + f
        newLoc = dest + '\\' + f

        if not os.path.isfile(newLoc):
            try:
                shutil.copy2(oldLoc, newLoc)
                print('File ' + f + ' copied.')
            except IOError:
                print('file "' + f + '" already exists')</t>
<t tx="2015.20140916184224.2608">先前已經完成 skylark ORM 版本

目前改用 peewee ORM, 已經測試 SQLite 與 MySQL, 準備加入近端與雲端上的 PostgreSQL</t>
<t tx="2015.20140917185942.2149">OPENSHIFT_POSTGRESQL_DB_PASSWORD
OPENSHIFT_POSTGRESQL_DB_HOST
OPENSHIFT_POSTGRESQL_DB_GEAR_DNS
OPENSHIFT_POSTGRESQL_DB_USERNAME
OPENSHIFT_POSTGRESQL_DB_GEAR_UUID
OPENSHIFT_POSTGRESQL_DB_URL
OPENSHIFT_POSTGRESQL_VERSION
OPENSHIFT_POSTGRESQL_DB_PORT</t>
<t tx="amd.20150517161425.1">2015.05.17

 OpenShift 上為 http://pygroup-kmolmdetw.rhcloud.com
 以 kmolmdetw@gmail.com 登記
 </t>
<t tx="amd.20150517161644.1">並且以 http://pygroup-kmolmdetw.rhcloud.com 同步執行

在近端執行時:

# 避開 winreg 模組無法找到的問題"
# Ubuntu 14.04, Python 3.4.0, CherryPy 3.5.0
cherrypy.config.update({'engine.autoreload_on':False})
# 若在近端以 Python 直接執行, 則使用下一行啟動
cherrypy.quickstart(root, config = application_conf)

將 login.html 中的近端 SSL 跳轉 Javascript 蓋掉
</t>
<t tx="course-mde-tw.20140417093332.1998"></t>
<t tx="course-mde-tw.20140417093332.1999">QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="course-mde-tw.20140417093332.2000">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="course-mde-tw.20140417093332.2001"></t>
<t tx="course-mde-tw.20140417093332.2027"></t>
<t tx="course-mde-tw.20140417093332.2047">各組的報告統一放在 doc 目錄下, 並且按照分組編號作為目錄名稱

最後希望能夠利用程式整合各分組報告內容, 統一處理成為 pdf 與 html 檔案

目錄架構:

doc 
    2ag1
        doc.txt
    2ag2
        doc.txt</t>
<t tx="course-mde-tw.20140417093332.2048"></t>
<t tx="course-mde-tw.20140417093332.2049"></t>
<t tx="course-mde-tw.20140417093332.2051"></t>
<t tx="course-mde-tw.20140417093332.2058">@language latex

% 中文內容設定

\usepackage{xeCJK}    % 中英文字行分開設置
\usepackage[T1]{fontspec}    %設定字體用
\usepackage{graphicx}
\usepackage{fancyvrb} % for frame on Verbatim
% 新細明體
% 文鼎ＰＬ新宋
\setCJKmainfont{新細明體}</t>
<t tx="course-mde-tw.20140417093332.2059">@language python
import os
'''
c is the commander of the outline containing the script.
g is Leo's leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
d = c.scanAllDirectives(p)
#g.es(d)
# d 為 commander 由目前所在目錄進行指令設定掃描
# d 資料格式為 dictionary
''' 
實際操作下, d 為 
{'tabwidth': -4, 'lineending': None, 'language': 'python', 'encoding': None, 'pluginsList': [], 'pagewidth': 70, 'wrap': True, 'path': 'D:\\github\\mdeCourse\\2013spring', 'delims': ('#', '', '')}
'''
#在處理 pandoc 之前,  將協同人員上傳的 file1.txt 與 file2.txt 結合為 demo.txt
# 應該以 walkdir 走進各目錄取檔案名稱後, 然後依照字串排序決定先後次序
filenames = ['title.txt', '2ag1/doc.txt', '2ag2/doc.txt', 'coursemdetw/doc.txt']
directory = "V:/project/2014cda/wsgi/doc/"
with open('V:/project/2014cda/wsgi/pandoc/result.txt', 'w', encoding="utf-8") as outfile:
    for fname in filenames:
        fname = directory+fname
        with open(fname, encoding="utf-8") as infile:
            for line in infile:
                outfile.write(line)
            outfile.write("\n\n")

# 將目錄指到 pandoc
mandir = d.get('path') + "/wsgi/pandoc"
g.es(mandir)
os.chdir(mandir)
# 先轉一份 html 
os.system("V:\\apps\\pandoc\\pandoc.exe -s result.txt -o result.html")
# 利用 pandoc 將 demo.txt 轉為 demo.tex, 在此決定是否要有 toc
os.system("V:\\apps\\pandoc\\pandoc.exe -s result.txt --toc -o result.tex")
# 中文設定必須要放在 begin document 之前
setup = ''' 
\\usepackage{xeCJK}    % 中英文字行分開設置 
\\usepackage[T1]{fontspec}    %設定字體用 
\\usepackage{graphicx} 
\\usepackage{fancyvrb} % for frame on Verbatim 
\\setCJKmainfont{新細明體}
'''
# 在 demo.tex 最前頭加上"中文設定"
file = open("result.tex", "r", encoding="utf-8")
lines = file.read().splitlines()
file.close()
file = open("result.tex", "w", encoding="utf-8")
for i in range(len(lines)):
    # 設法將中文設定放在文件開始之前, 以便蓋掉之前的設定
    if "\\begin{document}" in lines[i]:
        file.write(setup+lines[i]+"\n")
    else:
        file.write(lines[i]+"\n")
file.close()
target_name = "result"
filename = target_name+".tex"
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xelatex.exe -no-pdf -interaction=nonstopmode "+filename)
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xelatex.exe -no-pdf -interaction=nonstopmode "+filename)
filename = target_name+".xdv"
os.system("V:\\apps\\portableLatex\\MiKTeX\\texmf\\miktex\\bin\\xdvipdfmx.exe -vv -E "+filename)

filename = target_name+".pdf"
os.system(filename)</t>
<t tx="course-mde-tw.20140417093332.2060"></t>
<t tx="course-mde-tw.20140422171455.1745">在 Github 倉儲中將 OpenShift 倉儲設為 remote 倉儲

git remote add openshift ssh://5356315e4382ec2b3f000557@2014cda-mdenfu.rhcloud.com/~/git/2014cda.git/

利用 git pull 拉下目前位於 OpenShift 對應倉儲上的程式碼

git pull 的目的在設法讓 OpenShift 與 Github 中的 git 專案合併

若與 Github 近端倉儲中的資料沒有產生衝突, 則可以在內容修改後, 同時 push 到 Github 與 OpenShift

目前 OpenShift 網站: http://2014cda-mdenfu.rhcloud.com/

Github 倉儲則為: https://github.com/coursemdetw/2014cda

目前的規劃是讓參與協同者可以自由更新 Github 倉儲內容

並且將 Github 倉儲與各組可以控制的 OpenShift 網站同步</t>
<t tx="course-mde-tw.20140422221207.1747">mathspec.sty 檔案必須放在 pandoc 目錄中, 與文書處理原始檔案放在一起.</t>
</tnodes>
</leo_file>
